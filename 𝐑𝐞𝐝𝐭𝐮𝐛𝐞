const Apollo = {
    version: 20241001,
    empty: "hiker://empty",
    url: "https://www.redtube.com",
    d: [],
    MovePageTo: function(url, currentPage, lastPage) {
        if (!currentPage) {
            currentPage = getMyVar("page") ? Number(getMyVar("page")) + Number(MY_PAGE) - 1 : MY_PAGE
        }
        if (!lastPage) {
            lastPage = "未知"
        }
        var longClick = {
            title: '跳页【当前' + currentPage + ' => ' + lastPage + '】',
            js: $.toString((lastPage, url) => {
                    return $('', '正确的页码：1=>' + lastPage)
                        .input((url, lastPage) => {
                                if (input > 0 && input % 1 == 0) {
                                    var jumpu = url.replace(/(\?page=\d+|\&page=\d+|$)/, (match) => {
                                        if (match.startsWith('?page=') || match.startsWith('&page=')) {
                                            return match.charAt(0) + 'page=' + input;
                                        } else {
                                            return (url.includes('?') ? '&page=' : '?page=') + input;
                                        }
                                    });
                                    if (/\/channels\/|\/pornstar\/|\/redtube\//.test(input)) {
                                        putMyVar("ypage", input);
                                        putMyVar("yurl", jumpu);
                                    } else {
                                        putMyVar("page", input);
                                        putMyVar("url", jumpu);
                                    }
                                    refreshPage();
                                    return 'toast://你已经穿越到了' + input + '页'
                                } else {
                                    return "toast://请输入正确的页码"
                                }
                            },
                            url, lastPage)
                },
                lastPage, url)
        };
        return longClick
    },
    data: {
        category: getMyVar('Apo.category', '0'),
        subCate: getMyVar('Apo.subCate', '0'),
    },
    getRangeColors: function() {
        return '#' + ('00000' + (Math.random() * 0x1000000 << 0)
                .toString(16))
            .substr(-6);
    }, //随机颜色
    baseParse: () => {
        putMyVar("MY_TYPE", "主页");
        clearMyVar("ypage");
        clearMyVar("yurl");
        clearMyVar("ysort");
        const page = parseInt(MY_URL.split('##')[2])
        let categoryList = [{
            "title": "Recommended",
            "path": "/recommended",
            "type": "video",
            "sub": []
        }, {
            "title": "Porn Video",
            "path": "/hot",
            "type": "video",
            "sub": []
        }, {
            "title": "Language",
            "path": "/inyourlanguage/en",
            "type": "video",
            "sub": []
        }, {
            "title": "Categories",
            "path": "/categories/popular",
            "type": "category",
            "sub": []
        }, {
            "title": "Pornstars",
            "path": "/pornstar/topranked/?period=weekly",
            "type": "pornstar",
            "sub": []
        }, {
            "title": "Channels",
            "path": "/channel/recently-updated",
            "type": "channel",
            "sub": []
        }]
        const currentCate = categoryList[Apollo.data.category]
        let url
        let type = currentCate.type
        let path = currentCate.path
        if (currentCate.sub.length > 0) {
            url = Apollo.url + getMyVar("url", currentCate.sub[Apollo.data.subCate].path)
            path = currentCate.sub[Apollo.data.subCate].path
        } else {
            url = Apollo.url + getMyVar("url", currentCate.path)
        }
        url = url.replace(/https?.*(https?.*)/, "$1")
        if (page === 1) {
            categoryList.forEach((cate, index) => {
                Apollo.d.push({
                    title: parseInt(Apollo.data.category) === index ? '““””' + cate.title.fontcolor("#FFFFFF").bold() : cate.title,
                    url: $(Apollo.empty + "#noLoading#")
                        .lazyRule((index) => {
                            putMyVar("Apo.category", index.toString())
                            putMyVar("Apo.subCate", '0')
                            clearMyVar("url");
                            clearMyVar("page");
                            refreshPage(true)
                            return "hiker://empty"
                        }, index),
                    col_type: 'scroll_button',
                    extra: {
                        'backgroundColor': parseInt(Apollo.data.category) === index ? Apollo.getRangeColors() : ''
                    }
                })
            })
            if (currentCate.sub.length > 0) {
                Apollo.d.push({
                    col_type: 'blank_block',
                })
                currentCate.sub.forEach((cate, index) => {
                    Apollo.d.push({
                        title: parseInt(Apollo.data.subCate) === index ? '““””' + cate.title.fontcolor("#FFFFFF").bold() : cate.title,
                        url: $(Apollo.empty + "#noLoading#")
                            .lazyRule((index) => {
                                putMyVar("Apo.subCate", index.toString())
                                clearMyVar("url")
                                clearMyVar("page");
                                refreshPage(true)
                                return "hiker://empty"
                            }, index),
                        col_type: 'scroll_button',
                        extra: {
                            'backgroundColor': parseInt(Apollo.data.subCate) === index ? Apollo.getRangeColors() : ''
                        }
                    })
                })
            }
        }

        //翻页
        let nextPage = getMyVar("nextPage", "");
        if (nextPage && MY_PAGE > 1) {
            if (url.includes("random")) {
                url = url
            } else {
                url = nextPage;
            };
        } else if (MY_PAGE > 1) {
            url = "没有下一页哦😑"
        }

        var html = fetch(url, {
            headers: {
                //"cookie": fetchPC('hiker://files/rules/Apollo/Cookie/youporn_cookie.txt') || '',
                "User-Agent": "Mozilla/5.0 (Linux; Android 12; PFVM10 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046285 Mobile Safari/537.36",
            }
        })

        log(url)
        try {
            var next = pdfh(html, "body&&#w_pagination&&#wp_navNext&&a&&href");
            if (next == "") {
                putMyVar("nextPage", "没有下一页哦😑");
            } else {
                next = Apollo.url + next
                next = next.replace(/.*(http.*)/, "$1")
                putMyVar("nextPage", next);
            }
        } catch {
            clearMyVar("nextPage");
            //log("可能不存在下一页或者下一页定位有问题");
        }
        if (MY_PAGE == 1) {
            Apollo.DynamicSort(url, html)
            Apollo.d.push({
                title: "🔍",
                url: $.toString((url) => {
                    if (input.trim() != "") {
                        putMyVar('keyword', input);
                        var searchUrl = getHome(url) + "/?search=" + input
                        putMyVar("url", searchUrl);
                        refreshPage();
                        return "hiker://empty"
                    } else {
                        return "confirm://搜索内容为空.js:'hiker://empty'"
                    }
                }, url),
                desc: '搜索...',
                col_type: "input",
                extra: {
                    defaultValue: getMyVar('keyword', '') || "",
                }
            });
        }
        if (MY_PAGE == 1 && url.includes("search")) {
            Apollo.d.push({
                title: '““””' + "搜寻结果".fontcolor("#FF00FF"),
                url: "hiker://empty",
                col_type: "text_1",
                extra: {
                    lineVisible: false
                }
            })
        }

        switch (type) {
            case 'video':
                Apollo.videoType(url, html)
                break
            case 'category':
                if (MY_PAGE == 1) {
                    Apollo.categoryType(html)
                }
                break
            case 'channel':
                Apollo.channelType(url, html)
                break
            case 'pornstar':
                Apollo.pornstarType(url, html)
                break
            default:
                Apollo.videoType(url, html)
        }
        setResult(Apollo.d)
    },
    //两开花分类
    DynamicSort: (url, html) => {
        if (getMyVar("MY_TYPE") == "主页") {
            if (url.includes("channel")) {
                var 分类列表 = '.tm_sorting_dropdown&&li';
                var 大类列表 = 分类列表;
            } else {
                var 分类列表 = 'body&&.videos_sorting_list_item:not(:matches(Language))||.overlay_menu_item:has(.language_list_name)'
                var 大类列表 = 分类列表;
            }
        } else {
            if (url.includes("/redtube/")) {
                var 分类列表 = '.tm_sorting_dropdown&&.videos_sorting_list_item';
                var 大类列表 = 分类列表;
            } else {
                var 分类列表 = 'body&&.overlay_filter_link:not(:has(em))';
                var 大类列表 = 分类列表;
            }
        }
        var 分类标题 = 'a&&Text.js:input.replace("Most ","")';
        var 分类链接 = "a&&href";
        var 小类列表 = 'body&&a,1:';
        var 标题 = 'a&&Text';
        var 链接 = 'a&&href';
        var 样式 = 'scroll_button';

        var arts = pdfa(html, 分类列表);
        var tabs = [];
        var tabu = [];
        var conts = pdfa(html, 大类列表);
        var lists = [];
        for (var i in conts) {
            lists.push(pdfa(conts[i], 小类列表))
        }
        for (var i in arts) {
            tabs.push(pdfh(arts[i], 分类标题))
            tabu.push(pdfh(arts[i], 分类链接) ? Apollo.url + pdfh(arts[i], 分类链接) : Apollo.url + pdfh(lists[i][0], 链接))
        }

        function setTabs(tabs, taburl) {
            Apollo.d.push({
                col_type: "blank_block"
            })
            try {
                for (var i in tabs) {
                    var tabname = tabs[i];
                    Apollo.d.push({
                        title: (getMyVar("MY_TYPE") !== "主页" ?
                            (getMyVar("ysort", '0') == i ? "““””" + tabname.fontcolor(Apollo.getRangeColors()).bold() : tabname) :
                            (getMyVar(taburl, '0') == i ? "““””" + tabname.fontcolor(Apollo.getRangeColors()).bold() : tabname)),
                        col_type: 'scroll_button',
                        extra: {
                            'backgroundColor': (getMyVar("MY_TYPE") !== "主页" ?
                                (getMyVar("ysort", '0') == i ? Apollo.getRangeColors() : '') :
                                (getMyVar(taburl, '0') == i ? Apollo.getRangeColors() : ''))
                        },
                        url: tabu[i].replace(/.*(http.*)/, "$1") + $("#noLoading#").lazyRule((tabname, taburl, i) => {
                            if (getMyVar("MY_TYPE") !== "主页") {
                                putMyVar("ysort", i)
                                putMyVar("yurl", input)
                            } else {
                                putMyVar(taburl, i)
                                putMyVar("url", input)
                            }
                            clearMyVar("page");
                            clearMyVar("ypage");
                            refreshPage(false);
                            return 'hiker://empty'
                        }, tabname, taburl, i)
                    })
                }
            } catch {}
            Apollo.d.push({
                col_type: "blank_block"
            })
        }

        function setLists(lists, index) {
            var list = lists[index];

            function playLists() {
                try {
                    for (var j = 0; j < list.length; j++) {
                        var title = parseDomForHtml(list[j], 标题);
                        var url = Apollo.url + parseDom(list[j], 链接);
                        url = url.replace(/.*(http.*)/, "$1")
                        var col = 样式;
                        Apollo.d.push({
                            title: (getMyVar("MY_TYPE") !== "主页" ?
                                (getMyVar("ysort" + index, '0') == j ? "““””" + title.fontcolor(Apollo.getRangeColors()).bold() : title) :
                                (getMyVar("taburl" + index, '0') == j ? "““””" + title.fontcolor(Apollo.getRangeColors()).bold() : title)),
                            url: url + $("#noLoading#").lazyRule((j, index) => {

                                if (getMyVar("MY_TYPE") !== "主页") {
                                    putMyVar("ysort" + index, j)
                                    putMyVar("yurl", input)
                                } else {
                                    putMyVar("taburl" + index, j)
                                    putMyVar("url", input)
                                }
                                clearMyVar("page");
                                clearMyVar("ypage");
                                refreshPage(false);
                                return 'hiker://empty'
                            }, j, index),
                            extra: {
                                'backgroundColor': (getMyVar("MY_TYPE") !== "主页" ?
                                    (getMyVar("ysort" + index, '0') == j ? Apollo.getRangeColors() : '') :
                                    (getMyVar("taburl" + index, '0') == j ? Apollo.getRangeColors() : ''))
                            },
                            col_type: col,
                        });
                    }
                } catch {}
            }
            playLists()
        }

        if (getMyVar("MY_TYPE") == "主页") {
            setTabs(tabs, Apollo.data.category);
            setLists(lists, getMyVar(Apollo.data.category, '0'));
        } else {
            setTabs(tabs, "0");
            setLists(lists, getMyVar("ysort", "0"));
        }
    },
    //一级视频列表
    videoType: (url, html) => {
        try {
            var currentPage = pdfh(html, "body&&#w_pagination&&li.active&&Text").match(/\d+/)[0]
        } catch {
            var currentPage = "1"
        }
        try {
            lastPage = pdfh(html, "body&&#w_pagination&&li,-1&&Text").match(/\d+/)[0]
        } catch {
            var lastPage = currentPage
        }
        var list = pdfa(html, "body&&.videoblock_list");
        list.forEach(item => {
            var vurl = Apollo.url + pdfh(item, 'a&&href');
            vurl = vurl.replace(/.*(http.*)/, "$1");
            var title = pdfh(item, ".video_title&&Text");
            Apollo.d.push({
                title: title,
                desc: "\t\t⏰" + pdfh(item, ".duration&&Text"),
                img: pdfh(item, "img&&data-o_thumb"),
                url: vurl + $('').lazyRule(() => {
                    url = "https://embed.redtube.com/?id=" + input.replace(/.*\/(\d+)$/, "$1")
                    var html = fetch(input, {
                        headers: {
                            Referer: "https://www.redtube.com/"
                        }
                    })
                    try {
                        var playervars = html.match(/playervars:(.*)\,/)[1];
                        var hls = "https://embed.redtube.com" + JSON.parse(playervars).mediaDefinitions.shift().videoUrl;
                        //var mp4 = "https://embed.redtube.com" + JSON.parse(playervars).mediaDefinitions.pop().videoUrl

                        function playlist(url) {
                            try {
                                var list = JSON.parse(fetch(url))
                                // 按分辨率降序排序
                                list.sort((a, b) => b.quality - a.quality);
                                var names = list.map(i => i.quality)
                                var urls = list.map(i => i.videoUrl)
                                return {
                                    names,
                                    urls
                                }
                            } catch {
                                return {}
                            }
                        }
                        /*var names = playlist(hls).names.concat(playlist(mp4).names)
                        var urls = playlist(hls).urls.concat(playlist(mp4).urls)*/
                        return playlist(hls)
                    } catch {
                        return "toast://解析失效了😂"
                    }
                }),
                col_type: "movie_2",
                extra: {
                    pageTitle: title,
                    longClick: !url.includes("viewkey") ? [{
                        title: "翻译",
                        js: $.toString((title) => {
                            var Apollo = $.require('hiker://page/Apollo')
                            var trans = Apollo.translate(title);
                            return `confirm://${trans}.js: 'hiker://empty' `
                        }, title)
                    }, Apollo.MovePageTo(url, currentPage, lastPage)] : ""
                }
            })
        })
    },
    //分类
    categoryType: (html) => {
        Apollo.d.push({
            title: "Most Popular Categories".fontcolor("#FF00FF").bold(),
            col_type: "rich_text"
        })
        var list = pdfa(html, "body&&.category_item");
        list.forEach(item => {
            var vurl = Apollo.url + pdfh(item, 'a&&href');
            vurl = vurl.replace(/.*(http.*)/, "$1");
            var title = pdfh(item, "img&&alt");
            Apollo.d.push({
                title: title.slice(0, 16) + "\n" + pdfh(item, "span&&Text"),
                img: pdfh(item, "img&&data-src"),
                url: vurl + $('##fypage')
                    .rule(() => {
                        const Apollo = $.require('hiker://page/Apollo')
                        Apollo.yijiParse(MY_URL.split("##")[0])
                    }),
                extra: {
                    pageTitle: title,
                    longClick: [{
                        title: "翻译",
                        js: $.toString((title) => {
                            var Apollo = $.require('hiker://page/Apollo')
                            var trans = Apollo.translate(title);
                            return `confirm://${trans}.js: 'hiker://empty' `
                        }, title)
                    }]
                },
                col_type: "card_pic_3",
            })
        })
    },
    //频道
    channelType: (url, html) => {
        var list = pdfa(html, ".channel_list_v2&&li");
        list.forEach(item => {
            var vurl = Apollo.url + pdfh(item, 'a&&href');
            vurl = vurl.replace(/.*(http.*)/, "$1")
            var title = pdfh(item, "img&&alt");
            Apollo.d.push({
                title: title,
                desc: pdfh(item, ".channel_videos&&Text"),
                img: pdfh(item, "img&&src"),
                url: vurl + $('##fypage')
                    .rule(() => {
                        const Apollo = $.require('hiker://page/Apollo')
                        Apollo.yijiParse(MY_URL.split("##")[0])
                    }),
                extra: {
                    pageTitle: title,
                    longClick: [{
                        title: "翻译",
                        js: $.toString((title) => {
                            var Apollo = $.require('hiker://page/Apollo')
                            var trans = Apollo.translate(title);
                            return `confirm://${trans}.js: 'hiker://empty' `
                        }, title)
                    }, Apollo.MovePageTo(url)]
                },
                col_type: "movie_2",
            })
        })
    },
    //明星
    pornstarType: (url, html) => {
        var list = pdfa(html, "#pornstars_list&&li");
        list.forEach(item => {
            var vurl = Apollo.url + pdfh(item, 'a&&href');
            vurl = vurl.replace(/.*(http.*)/, "$1")
            var title = pdfh(item, "img&&alt");
            Apollo.d.push({
                title: title,
                desc: "🎖" + pdfh(item, ".ps_info_rank&&Text").replace("Rank:", "") + "📀" + pdfh(item, ".ps_info_count&&Text"),
                img: pdfh(item, "img&&data-src") ? pdfh(item, "img&&data-src") : "https://thumbsnap.com/i/wxDcxfJH.png",
                url: vurl + $('##fypage')
                    .rule(() => {
                        const Apollo = $.require('hiker://page/Apollo')
                        Apollo.yijiParse(MY_URL.split("##")[0])
                    }),
                extra: {
                    pageTitle: title,
                    longClick: [{
                        title: "翻译",
                        js: $.toString((title) => {
                            var Apollo = $.require('hiker://page/Apollo')
                            var trans = Apollo.translate(title);
                            return `confirm://${trans}.js: 'hiker://empty' `
                        }, title)
                    }, Apollo.MovePageTo(url)]
                },
                col_type: "movie_3",
            })
        })
    },

    //一级.简
    yijiParse: (url) => {
        putMyVar("MY_TYPE", "一级")
        addListener("onClose", $.toString(() => {
            clearMyVar("ypage");
            clearMyVar("yurl");
            clearMyVar("ysort");
            clearMyVar("ysort" + 0);
            clearMyVar("ysort" + 1);
            clearMyVar("ysort" + 2);
            clearMyVar("ysort" + 3);
            clearMyVar("ysort" + 4);
            clearMyVar("ysort" + 5);
        }));
        url = getMyVar("yurl", url)
        //翻页
        let nextPage = getMyVar("ynextPage", "");
        if (nextPage && MY_PAGE > 1) {
            if (url.includes("random")) {
                url = url
            } else {
                url = nextPage;
            };
        } else if (MY_PAGE > 1) {
            url = "没有下一页哦😑"
        }
        var html = fetch(url, {
            headers: {
                //"cookie": fetchPC('hiker://files/rules/Apollo/Cookie/youporn_cookie.txt') || '',
                "User-Agent": "Mozilla/5.0 (Linux; Android 12; PFVM10 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046285 Mobile Safari/537.36",
            }
        })
        log(url)
        try {
            var next = pdfh(html, "body&&#w_pagination&&#wp_navNext&&a&&href");
            if (next == "") {
                putMyVar("ynextPage", "没有下一页哦😑");
            } else {
                next = Apollo.url + next
                next = next.replace(/.*(http.*)/, "$1")
                putMyVar("ynextPage", next);
            }
        } catch {
            clearMyVar("ynextPage");
            //log("可能不存在下一页或者下一页定位有问题");
        }
        if (MY_PAGE == 1) {
            Apollo.DynamicSort(url, html)
        }
        Apollo.videoType(url, html)
        setResult(Apollo.d)
    },

    //搜索
    searchParse: (url) => {
        url = Apollo.url + "/?search=" + url.split("##")[1] + "&page=" + MY_PAGE
        log(url)
        var html = fetch(url, {
            headers: {
                //"cookie": fetchPC('hiker://files/rules/Apollo/Cookie/youporn_cookie.txt') || '',
                "User-Agent": "Mozilla/5.0 (Linux; Android 12; PFVM10 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046285 Mobile Safari/537.36",
            },
        });
        Apollo.videoType(url, html)
        setResult(Apollo.d)
    },
    //翻译
    translate: (text) => {
        var switchtrans = config.switchtrans
        if (!switchtrans || switchtrans == true || switchtrans == "彩云小译") {
            try {
                var to = 'zh'
                var from = 'auto'

                function init_data(source_lang, target_lang) {
                    return {
                        source: '',
                        detect: true,
                        os_type: 'ios',
                        device_id: 'F1F902F7-1780-4C88-848D-71F35D88A602',
                        trans_type: source_lang + '2' + target_lang,
                        media: 'text',
                        request_id: 424238335,
                        user_id: '',
                        dict: true,
                    }
                }

                function getRandomNumber() {
                    const rand = Math.floor(Math.random() * 99999) + 100000
                    return rand * 1000
                }
                const post_data = init_data(from, to)
                post_data.source = text
                post_data.request_id = getRandomNumber()
                let res = fetch('https://interpreter.cyapi.cn/v1/translator', {
                    method: 'POST',
                    header: {
                        'Content-Type': 'application/json',
                        'x-authorization': 'token ssdj273ksdiwi923bsd9',
                        'user-agent': 'caiyunInterpreter/5 CFNetwork/1404.0.5 Darwin/22.3.0',
                    },
                    body: post_data,
                })
                let result = JSON.parse(res)
                    .target
                return result + "【☁️】"
            } catch {
                log("翻译失败，使用原文");
                return text
            }
        } else if (switchtrans == "小牛翻译") {
            try {
                var url = "https://api.niutrans.com/NiuTransServer/translation";
                var api = config.api;
                if (api) {
                    if (text != "") {
                        var lang = "https://test.niutrans.com/NiuTransServer/language?src_text=" + text + "&source=text";
                        var from = JSON.parse(fetch(lang, {
                                timeout: 1000
                            }))
                            .language;
                        var result = post(url, {
                            body: {
                                src_text: text,
                                from: from,
                                to: "zh",
                                apikey: api,
                            },
                            timeout: 1223
                        });
                        var data = JSON.parse(result)
                        if (data.tgt_text) {
                            return data.tgt_text + "【🐮】"
                        } else {
                            log("翻译失败，使用原文");
                            return text
                        }
                    } else {
                        log("翻译失败，原文为空");
                        return text
                    }
                } else {
                    toast("预处理请填写翻译api")
                    return text
                }
            } catch {
                log("翻译失败，使用原文");
                return text
            }
        } else {
            return text
        }
    },

}

$.exports = Apollo