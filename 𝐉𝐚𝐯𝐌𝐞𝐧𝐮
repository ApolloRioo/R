const Apollo = {
    version: "20240922",
    empty: "hiker://empty",
    url: "https://javmenu.com/zh",
    d: [],
    data: {
        category: getMyVar('Apo.category', '0'),
        subCate: getMyVar('Apo.subCate', '0'),
    },
    baseParse: () => {
        const page = parseInt(MY_URL.split('##')[2])
        let categoryList = [{
            "path": "/rank/censored/day",
            "sub": [{
                "path": "/rank/censored/day",
                "title": "日榜"
            }, {
                "path": "/rank/censored/week",
                "title": "週榜"
            }, {
                "path": "/rank/censored/month",
                "title": "月榜"
            }, {
                "path": "/rank/censored/actress",
                "title": "女优榜"
            }],
            "title": "排行榜",
            "type": "video"
        }, {
            "path": "/censored/filter",
            "sub": [{
                "path": "/censored/filter",
                "title": "有码"
            }, {
                "path": "/uncensored/filter",
                "title": "无码"
            }, {
                "path": "/western/filter",
                "title": "欧美"
            }, {
                "path": "/fc2/filter",
                "title": "FC2"
            }, {
                "path": "/hanime/online",
                "title": "成人动画"
            }, {
                "path": "/chinese/online",
                "title": "国产"
            }],
            "title": "筛选器",
            "type": "video"
        }, {
            "path": "/censored/actress",
            "sub": [{
                "path": "/censored/actress",
                "title": "有码"
            }, {
                "path": "/uncensored/actress",
                "title": "无码"
            }, {
                "path": "/western/actress",
                "title": "欧美"
            }],
            "title": "女优",
            "type": "actress"
        }, {
            "path": "/series/censored",
            "sub": [{
                "path": "/series/censored",
                "title": "有码"
            }, {
                "path": "/series/uncensored",
                "title": "无码"
            }, {
                "path": "/series/western",
                "title": "欧美"
            }, {
                "path": "/code/LUXU",
                "title": "LUXU"
            }, {
                "path": "/code/ARA",
                "title": "ARA"
            }, {
                "path": "/code/SIRO",
                "title": "SIRO"
            }],
            "title": "系列",
            "type": "series"
        }]
        const currentCate = categoryList[Apollo.data.category]
        let url
        let type = currentCate.type
        let path = currentCate.path
        if (currentCate.sub.length > 0) {
            url = Apollo.url + getMyVar("url", currentCate.sub[Apollo.data.subCate].path)
            path = currentCate.sub[Apollo.data.subCate].path
        } else {
            url = Apollo.url + getMyVar("url", currentCate.path)
        }
        url = url.replace(/https?.*\/zh(https?.*)/, "$1")

        if (page === 1) {
            categoryList.forEach((cate, index) => {
                Apollo.d.push({
                    title: parseInt(Apollo.data.category) === index ? '‘‘’’<strong><font color="#ff1493">' + cate.title + '</font></strong>' : cate.title,
                    url: $(Apollo.empty + "#noLoading#")
                        .lazyRule((index) => {
                        putMyVar("Apo.category", index.toString())
                        putMyVar("Apo.subCate", '0')
                        clearMyVar("sort")
                        clearMyVar("url")
                        refreshPage(true)
                        return "hiker://empty"
                    }, index),
                    col_type: 'scroll_button',
                })
            })
            if (currentCate.sub.length > 0) {
                Apollo.d.push({
                    col_type: 'blank_block',
                })
                currentCate.sub.forEach((cate, index) => {
                    Apollo.d.push({
                        title: parseInt(Apollo.data.subCate) === index ? '‘‘’’<strong><font color="#ff1493">' + cate.title + '</font></strong>' : cate.title,
                        url: $(Apollo.empty + "#noLoading#")
                            .lazyRule((index) => {
                            putMyVar("Apo.subCate", index.toString())
                            clearMyVar("sort")
                            clearMyVar("url")
                            refreshPage(true)
                            return "hiker://empty"
                        }, index),
                        col_type: 'scroll_button',
                    })
                })
            }
        }
        //翻页
        /*        if (page !== 1) {
            url = url.includes("?") ? url + "&page=" + page : url + "?page=" + page
        }
        const html = fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            }
        })
        log(url)*/

        let nextPage = getMyVar("nextPage", "");
        if (nextPage && MY_PAGE > 1) {
            url = nextPage;
        } else if (MY_PAGE > 1) {
            url = "没有下一页哦😑"
        }
        const html = fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            }
        })
        log(url)
        try {
            var next = pdfh(html, ".pagination&&li:matches(›)&&a&&href")
            putMyVar("nextPage", next);
        } catch {
            clearMyVar("nextPage");
            // log("可能不存在下一页或者下一页定位有问题");
        }

        if (page === 1) {
            Apollo.videoSort(html, url)
            Apollo.d.push({
                col_type: "blank_block",
            })
        }

        Apollo.dtfenlei(html, url)
        switch (type) {
            case 'video':
                if (path.includes("actress")) {
                    Apollo.avatarType(html)
                } else {
                    Apollo.videoType(html)
                }
                break
            case 'actress':
                Apollo.avatarType(html)
                break
            case 'series':
                if (path.includes("series")) {
                    Apollo.seriesType(html)
                } else {
                    Apollo.videoType(html)
                }
                break
            default:
                Apollo.videoType(html)
        }
        setResult(Apollo.d)
    },

    //一级sort
    videoSort: (html, url) => {
        function addParam(key, value) {
            let[baseUrl, queryString] = url.split('?');
            let params = queryString ? queryString.split('&')
                .map(p => p.split('=')) : [];
            let paramFound = false;
            for (let i = 0; i < params.length; i++) {
                if (params[i][0] === key) {
                    paramFound = true;
                    if (key === 'single' && value == '1') {
                        params.splice(i, 1);
                    } else if (key === 'sort' && value === 'all') {
                        params.splice(i, 1);
                    } else {
                        params[i][1] = value;
                    }
                    break;
                }
            }
            if (!paramFound && !(key === 'single' && value === '1') && !(key === 'sort' && value === 'all')) {
                params.push([key, value]);
            }
            queryString = params.map(p => p.join('='))
                .join('&');
            return queryString ? '?' + queryString : '';
        }
        Apollo.d.push({
            col_type: "blank_block",
        })
        const sort = pdfa(html, '.ml-auto&&button');
        sort.forEach((item, index) => {
            var title = pdfh(item, 'Text');
            var button = pdfh(item, 'button&&onclick');
            var value = button.match(/\(.*\,\s\'(.*?)\'/) ? button.match(/\(.*\,\s\'(.*?)\'/)[1].replace("all", "^(?!.*sort).*$") : "single";
            Apollo.d.push({
                title: new RegExp(value)
                    .test(url) ? '‘‘’’<strong><font color="#ff1493">' + title + '</font></strong>' : title,
                url: url.split('?')[0].replace("https://javmenu.com/zh", "") + eval(button) + $('#noLoading#')
                    .lazyRule(() => {
                    putMyVar("url", input);
                    refreshPage(false);
                    return 'hiker://empty'
                }),
                col_type: 'scroll_button'
            })
            if (sort.length > 5 ? index == 3 : index == 2) {
                Apollo.d.push({
                    col_type: "blank_block",
                })
            }
        })
    },

    videoSort1: (html, url) => {
        function addParam(key, value) {
            let[baseUrl, queryString] = url.split('?');
            let params = queryString ? queryString.split('&')
                .map(p => p.split('=')) : [];
            let paramFound = false;
            for (let i = 0; i < params.length; i++) {
                if (params[i][0] === key) {
                    paramFound = true;
                    if (key === 'single' && value == '1') {
                        params.splice(i, 1);
                    } else if (key === 'sort' && value === 'all') {
                        params.splice(i, 1);
                    } else {
                        params[i][1] = value;
                    }
                    break;
                }
            }
            if (!paramFound && !(key === 'single' && value === '1') && !(key === 'sort' && value === 'all')) {
                params.push([key, value]);
            }
            queryString = params.map(p => p.join('='))
                .join('&');
            return queryString ? '?' + queryString : '';
        }
        Apollo.d.push({
            col_type: "blank_block",
        })
        const sort = pdfa(html, '.ml-auto&&button');
        sort.forEach((item, index) => {
            var title = pdfh(item, 'Text');
            var button = pdfh(item, 'button&&onclick');
            var value = button.match(/\(.*\,\s\'(.*?)\'/) ? button.match(/\(.*\,\s\'(.*?)\'/)[1].replace("all", "^(?!.*sort).*$") : "single";
            Apollo.d.push({
                title: new RegExp(value)
                    .test(url) ? '‘‘’’<strong><font color="#ff1493">' + title + '</font></strong>' : title,
                url: url.split('?')[0] + eval(button) + $('#noLoading#')
                    .lazyRule(() => {
                    putMyVar("yurl", input);
                    refreshPage(false);
                    return 'hiker://empty'
                }),
                col_type: 'scroll_button'
            })
            if (sort.length > 5 ? index == 3 : index == 2) {
                Apollo.d.push({
                    col_type: "blank_block",
                })
            }
        })
    },

    //动态分类
    dtfenlei: (html, url) => {
        const 分类颜色 = '#ff1493'
        const 大类定位 = '.card-body&&.filter-list'
        const 拼接分类 = ''
        const 小类定位 = 'body&&a'
        const 分类标题 = 'a&&Text'
        const 分类链接 = 'a&&onclick'
        try {
            var categories = pdfa(html, 大类定位)
                .concat(pdfa(html, 拼接分类))
        } catch (e) {
            var categories = pdfa(html, 大类定位)
        }
        let init_cate = []
        for (let i = 0; i < 20; i++) {
            init_cate.push("0")
        }
        const cate_temp_json = getVar(MY_RULE.title, JSON.stringify(init_cate))
        const cate_temp = JSON.parse(cate_temp_json)
        if (MY_PAGE === 1) {
            categories.forEach((category, index) => {
                let sub_categories = pdfa(category, 小类定位)
                    .filter(t => pdfh(t, 'Text')
                    .trim() !== '');
                let genre_title = pdfa(category, "body&&.genre-title")
                    .map(t => pdfh(t, "Text"));
                sub_categories.forEach((item, key) => {
                    let title = key == 0 ? genre_title[0] : pdfh(item, 分类标题)
                    let urll = key == 0 ? pdfh(item, "a&&href")
                        .replace("https://javmenu.com/zh", "") : pdfh(item, 分类链接)
                    var value = pdfh(item, 分类链接)
                        .match(/\d+/) ? pdfh(item, 分类链接)
                        .match(/\d+/)[0] : "all";
                    let params = url.match(/c=([^&]+)/) ? url.match(/c=([^&]+)/)[1] : "";
                    if (params) {
                        var c_array = params.split(",");
                    } else {
                        var c_array = [];
                    }
                    Apollo.d.push({
                        title: (c_array.indexOf(value.toString()) !== -1 || key == 0) ? '““””<b><span style="color: ' + 分类颜色 + '">' + title + '</span></b>' : title,
                        url: urll + $('#noLoading#')
                            .lazyRule((params, key, url) => {
                            params.cate_temp[params.index] = params.key.toString()
                            putVar(MY_RULE.title, JSON.stringify(params.cate_temp))

                            function addFilterParam(key, value) {
                                let params = url.match(/c=([^&]+)/) ? url.match(/c=([^&]+)/)[1] : "";
                                if (params) {
                                    var c_array = params.split(",");
                                } else {
                                    var c_array = [];
                                }
                                if (!c_array.includes(value.toString())) {
                                    if (c_array.length < 5) c_array.push(value.toString());
                                } else {
                                    c_array.splice(c_array.indexOf(value.toString()), 1)
                                }
                                paramsc = c_array.join(',');
                                if (params != "") {
                                    urlsc = url.replace(/(\?|&)c=[^&]+/, "$1c=" + paramsc)
                                } else {
                                    urlsc = url.includes("?") ? (url + "&c=" + paramsc) : (url + "?c=" + paramsc)
                                }
                                return urlsc
                            }
                            if (key == 0) {
                                putMyVar("url", input)
                            } else {
                                var inputt = eval(input)
                                    .replace("https://javmenu.com/zh", "")
                                putMyVar("url", inputt)
                            }
                            refreshPage(true)
                            return "hiker://empty"
                        }, {
                            cate_temp: cate_temp,
                            index: index,
                            key: key,
                            page: MY_PAGE,
                        }, key, url),
                        col_type: 'scroll_button',
                    })
                })
                Apollo.d.push({
                    col_type: "blank_block"
                });
            })
        }
    },

    //一级视频列表
    videoType: (html) => {
        try {
            var lastpagenum = pdfh(html, ".pagination&&li,-2&&Text") ? pdfh(html, ".pagination&&li,-2&&Text")
                .replace(/.*?(\d+)/, "$1") : "1";
            var currpagenum = pdfh(html, ".pagination&&li[aria-current]&&Text")
                .replace(/.*?(\d+)/, "$1")
            var lurl = pdfh(html, "html&&link[hreflang=zh]&&href")
        } catch {}
        var list = pdfa(html, "body&&.video-list-item:not(:has(a[target]))");
        list.forEach(item => {
            Apollo.d.push({
                title: pdfh(item, ".lazyload&&alt"),
                desc: pdfh(item, ".text-muted&&Text"),
                img: pdfh(item, ".lazyload&&data-src"),
                url: $(pdfh(item, 'a&&href') + '#noHistory#')
                    .rule(() => {
                    const Apollo = $.require('hiker://page/Apollo')
                    Apollo.videoParse(MY_URL)
                    setResult(Apollo.d)
                }),
                col_type: "movie_2",
                extra: {
                    pageTitle: pdfh(item, ".lazyload&&alt"),
                    longClick: lastpagenum > 0 ? [{
                        title: '【跳页】【当前' + currpagenum + '】=>\t最大页\t:【' + lastpagenum + "】",
                        js: $.toString((currpagenum, lastpagenum, lurl) => {
                            return $('', '1到' + lastpagenum + '之间的页码')
                                .input((lastpagenum, lurl) => {
                                if (parseInt(input) > 0 && parseInt(input) <= parseInt(lastpagenum) && parseInt(input) % 1 == 0) {
                                    var jumpu = lurl.replace(/(\?page=\d+|\&page=\d+|$)/, (match) => {
                                        if (match.startsWith('?page=') || match.startsWith('&page=')) {
                                            return match.charAt(0) + 'page=' + input;
                                        } else {
                                            return (lurl.includes('?') ? '&page=' : '?page=') + input;
                                        }
                                    });
                                    putMyVar("url", jumpu);
                                    putMyVar("yurl", jumpu);
                                    refreshPage(false);
                                    return 'toast://你已经穿越到了' + input + '页'
                                } else {
                                    return "toast://请输入正确的页码"
                                }
                            },
                            lastpagenum, lurl)
                        },
                        currpagenum, lastpagenum, lurl)
                    }] : ''
                }
            })
        })
    },

    //一级演员
    avatarType: (html) => {
        var list = pdfa(html, '.card-deck&&.video-list-item')
        list.forEach(item => {
            Apollo.d.push({
                title: pdfh(item, '.text-dark&&Text'),
                desc: "",
                pic_url: pdfh(item, 'img&&data-src') + '@Referer=',
                url: $(pdfh(item, 'a&&href') + '#fypage#noHistory#')
                    .rule(() => {
                    const Apollo = $.require('hiker://page/Apollo')
                    Apollo.avatarParse(MY_URL)
                    setResult(Apollo.d)
                }),
                col_type: 'card_pic_3'
            })
        })
    },

    //一级系列
    seriesType: (html) => {
        //随机颜色
        var getRangeColors = function() {
            return '#' + ('00000' + (Math.random() * 0x1000000 << 0)
                .toString(16))
                .substr(-6);
        }
        var list = pdfa(html, '.card-deck&&.col-lg-2')
        list.forEach(item => {
            Apollo.d.push({
                title: '““””' + pdfh(item, 'a&&Text')
                    .fontcolor(getRangeColors()),
                desc: "",
                // pic_url: pdfh(item, 'img&&data-src') + '@Referer=',
                url: $(Apollo.url + pdfh(item, 'a&&href') + '#fypage#noHistory#')
                    .rule(() => {
                    const Apollo = $.require('hiker://page/Apollo')
                    Apollo.avatarParse(MY_URL)
                    setResult(Apollo.d)
                }),
                col_type: 'flex_button'
            })
        })
        Apollo.d.push({
            col_type: "blank_block"
        })
    },

    //一级页面.简
    avatarParse: (url) => {
        addListener("onClose", $.toString(() => {
            clearMyVar("yurl");
            clearMyVar("nextPage1");
        }));
        url = getMyVar("yurl", url)
            .replace(/(.*?)#.*/, "$1");
        let nextPage = getMyVar("nextPage1", "");
        if (nextPage && MY_PAGE > 1) {
            url = nextPage;
        } else if (MY_PAGE > 1) {
            url = "没有下一页哦😑"
        }
        const html = fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            }
        })
        log(url)
        try {
            var next = pdfh(html, ".pagination&&li:matches(›)&&a&&href")
            putMyVar("nextPage1", next);
        } catch {
            clearMyVar("nextPage1");
            // log("可能不存在下一页或者下一页定位有问题");
        }
        if (MY_PAGE === 1) {
            Apollo.videoSort1(html, url)
        }
        Apollo.videoType(html)
    },

    //搜索
    searchParse: (url) => {
        url = url.replace("hiker://empty##", "")
        log(url)
        const html = fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            }
        });
        Apollo.videoType(html)
        setResult(Apollo.d)
    },

    //二级
    videoParse: (url) => {
        addListener("onClose", () => {
            clearMyVar("piclist");
        });
        var yiji = $('#fypage#noHistory#')
            .rule(() => {
            const Apollo = $.require('hiker://page/Apollo')
            Apollo.avatarParse(MY_URL)
            setResult(Apollo.d)
        })
        const html = fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            }
        })
        log(url)
        var title = pdfh(html, "h1&&Text")
            .replace("免费AV在线看", "");
        var desct = title;
        Apollo.d.push({
            title: '““””' + title.fontcolor("#E57A1A"),
            url: "hiker://empty" + $('#noLoading#')
                .lazyRule((desct) => {
                var desc = findItem('transdesc')
                    .desc
                if (!desc) {
                    const Apollo = $.require('hiker://page/Apollo')
                    var translates = Apollo.translate(desct)
                    updateItem("transdesc", {
                        desc: '““””' + translates.fontcolor("red"),
                    })
                } else {
                    updateItem("transdesc", {
                        desc: '',
                    })
                }
                return "hiker://empty"
            }, desct),
            col_type: 'text_1',
            extra: {
                lineVisible: false,
                id: 'transdesc',
                longClick: [{
                    title: '网页',
                    js: $.toString(() => {
                        return "web://" + MY_URL
                    })
                }, {
                    title: '复制',
                    js: $.toString((title) => {
                        return "copy://" + title;
                    }, title)
                }, {
                    title: '百度翻译',
                    js: $.toString((title) => {
                        return "x5://https://fanyi.baidu.com/#jp/zh/" + title
                    }, title)
                }, {
                    title: 'Deepl翻译',
                    js: $.toString((title) => {
                        return "x5://https://www.deepl.com/zh/translator-mobile#ja/zh/" + title
                    }, title)
                }, {
                    title: '谷歌翻译',
                    js: $.toString((title) => {
                        return "x5://https://translate.google.com/?hl=zh-CN&sl=ja&tl=zh-CN&text=" + title
                    }, title)
                }]
            }
        })
        const img = pdfh(html, "meta[property=og:image]&&content");
        const preview = pdfh(html, "#pills-preview&&source&&src")
        Apollo.d.push({
            img: img,
            url: preview ? preview : "toast://没有预览视频哦😐",
            col_type: "pic_1_full",
        })
        Apollo.d.push({
            col_type: "big_blank_block"
        })
        try {
            var names = pdfa(html, '#player-tab&&li:not(:matches(影片预览))');
            var urls = html.match(/m3u8.push.*/g)
                .map(m => m.match(/https?.*?\.m3u8/)[0]);
            for (var i = 0; i < Math.min(urls.length, names.length); i++) {
                Apollo.d.push({
                    title: pdfh(names[i], 'Text'),
                    url: urls[i],
                    col_type: names.length === 1 ? 'text_2' : (names.length > 5 ? 'flex_button' : 'text_' + names.length),
                })
            }
        } catch (err) {};
        Apollo.d.push({
            col_type: "big_blank_block"
        })
        const 识别码 = pdfh(html, "body&&.card-body&&.code--span&&Text")
        Apollo.CodeParse(识别码)

        try {
            var picnum = "点击展开图片";
            if (picnum != "") {
                var list = pdfa(html, "body&&.py-0&&a")
                Apollo.d.push({
                    title: '““””' + (picnum + list.length + "张")
                        .fontcolor("#FF00FF"),
                    url: Apollo.empty + $("")
                        .lazyRule((list) => {
                        try {
                            if (getMyVar("piclist", "收起") == "收起") {
                                addItemAfter('picnum', {
                                    title: '““””' + "【收起图片】".fontcolor("#FF00FF"),
                                    url: "hiker://empty" + $("")
                                        .lazyRule((list) => {
                                        for (var i = list.length - 1; i >= 0; i--) {
                                            deleteItem('previewpic' + i);
                                        }
                                        deleteItem('nopiclist');
                                        putMyVar("piclist", "收起");
                                        return "hiker://empty"
                                    }, list),
                                    col_type: "text_center_1",
                                    extra: {
                                        lineVisible: false,
                                        id: "nopiclist"
                                    }
                                })
                                for (var i = list.length - 1; i >= 0; i--) {
                                    addItemAfter('picnum', {
                                        url: 'hiker://empty',
                                        img: pdfh(list[i], "a&&href")
                                            .replace(/.*(https?.*)/, "$1"),
                                        col_type: "pic_1_full",
                                        extra: {
                                            id: 'previewpic' + i
                                        }
                                    });
                                }
                                putMyVar("piclist", "展开");
                            } else {
                                for (var i = list.length - 1; i >= 0; i--) {
                                    deleteItem('previewpic' + i);
                                }
                                deleteItem('nopiclist');
                                putMyVar("piclist", "收起");
                            }
                            return "hiker://empty"
                        } catch {
                            return "hiker://empty"
                        }
                    }, list),
                    col_type: "text_center_1",
                    extra: {
                        lineVisible: false,
                        id: "picnum"
                    }
                })
            }
        } catch {}

        Apollo.d.push({
            title: '““””' + "番号".fontcolor("#FFD000"),
            url: "copy://" + 识别码,
            col_type: "scroll_button",
        }, {
            title: pdfh(html, "body&&.card-body&&.code&&a&&Text") ? '““””' + pdfh(html, "body&&.card-body&&.code&&a&&Text")
                .fontcolor("#FFD000") + pdfh(html, "body&&.card-body&&.code&&span,-1&&Text")
                .fontcolor("green") : '““””' + pdfh(html, "body&&.card-body&&.code&&span,-1&&Text")
                .fontcolor("#FF00FF"),
            url: pdfh(html, "body&&.card-body&&.code&&a&&Text") ? Apollo.url + pdfh(html, "body&&.card-body&&.code&&a&&href") + yiji : Apollo.empty,
            col_type: "scroll_button",
            extra: {
                pageTitle: pdfh(html, "body&&.card-body&&.code&&a&&Text")
            }
        }, {
            col_type: 'blank_block',
        }, {
            title: "日期:",
            url: Apollo.empty,
            col_type: "scroll_button",
        }, {
            title: pdfh(html, 'body&&.card-body&&.d-flex:contains(日期:)&&Text') ? pdfh(html, 'body&&.card-body&&.d-flex:contains(日期:)&&Text')
                .replace("日期: ", "") : "N/A",
            url: Apollo.empty,
            col_type: "scroll_button",
        }, {
            title: "时长:",
            url: Apollo.empty,
            col_type: "scroll_button",
        }, {
            title: pdfh(html, 'body&&.card-body&&.d-flex:contains(时长:)&&Text') ? pdfh(html, 'body&&.card-body&&.d-flex:contains(时长:)&&Text')
                .replace("时长: ", "") : "N/A",
            url: Apollo.empty,
            col_type: "scroll_button",
        })
        //片商
        try {
            var makers = pdfh(html, 'body&&.card-body&&.d-flex:contains(製作:)&&a&&Text');
            if (makers) {
                Apollo.d.push({
                    title: "片商:",
                    url: 'hiker://empty',
                    col_type: 'scroll_button',
                })
                Apollo.d.push({
                    title: '‘‘’’<b><middle><font color="#1E90FF">' + makers + '</font></middle></b>',
                    url: Apollo.url + pdfh(html, 'body&&.card-body&&.d-flex:contains(製作:)&&a&&href') + yiji,
                    col_type: 'scroll_button',
                    extra: {
                        pageTitle: makers
                    }
                })
            }
        } catch {}

        //演员
        var arts = parseDomForArray(html, 'body&&.card-body&&.d-flex:contains(女优:)&&a');
        if (arts.length > 0) {
            Apollo.d.push({
                col_type: "blank_block"
            })
            Apollo.d.push({
                title: "演員:",
                url: 'hiker://empty',
                col_type: 'scroll_button',
            })
            for (var i in arts) {
                var title = parseDomForHtml(arts[i], 'Text');
                Apollo.d.push({
                    title: '‘‘’’<b><middle><font color="#c13141">' + title + '</font></middle></b>',
                    url: Apollo.url + pdfh(arts[i], 'a&&href') + yiji,
                    col_type: 'scroll_button',
                    extra: {
                        pageTitle: title,
                        longClick: [{
                            title: '复制演员',
                            js: $.toString((title) => {
                                return "copy://" + title;
                            }, title)
                        }, {
                            title: '谷歌搜索',
                            js: $.toString((title) => {
                                return "https://www.google.com/search?q=" + title;
                            }, title)
                        }, {
                            title: '百度搜索',
                            js: $.toString((title) => {
                                return "https://www.baidu.com/s?wd=" + title;
                            }, title)
                        }, {
                            title: '磁力搜演员',
                            js: $.toString((title) => {
                                return "hiker://page/sou?rule=磁力君.简&p=fypage&searchTerms=" + title
                            }, title)
                        }]
                    }
                })
            }
        }

        //导演
        try {
            var director = pdfh(html, 'body&&.card-body&&.d-flex:contains(导演:)&&a&&Text');
            if (director) {
                Apollo.d.push({
                    title: "导演:",
                    url: 'hiker://empty',
                    col_type: 'scroll_button',
                })
                Apollo.d.push({
                    title: '‘‘’’<b><middle><font color="#1E90FF">' + director + '</font></middle></b>',
                    url: Apollo.url + pdfh(html, 'body&&.card-body&&.d-flex:contains(导演:)&&a&&href') + yiji,
                    col_type: 'scroll_button',
                    extra: {
                        pageTitle: director
                    }
                });
            }
        } catch {}

        //类别
        var arts = parseDomForArray(html, 'body&&.card-body&&.d-flex:contains(类别:)&&a');
        if (arts.length > 0) {
            Apollo.d.push({
                col_type: "blank_block"
            })
            Apollo.d.push({
                title: "類別:",
                url: 'hiker://empty',
                col_type: 'scroll_button',
            });
            for (var i in arts) {
                Apollo.d.push({
                    title: '‘‘’’<b><middle><font color="#1E8884">' + parseDomForHtml(arts[i], 'Text') + '</font></middle></b>',
                    url: Apollo.url + pdfh(arts[i], 'a&&href') + yiji,
                    col_type: 'scroll_button',
                    extra: {
                        pageTitle: parseDomForHtml(arts[i], 'Text')
                    }
                })
            }
        }

        //系列
        var arts = parseDomForArray(html, 'body&&.card-body&&.d-flex:contains(系列:)&&a');
        if (arts.length > 0) {
            Apollo.d.push({
                col_type: "blank_block"
            })
            Apollo.d.push({
                title: "系列:",
                url: 'hiker://empty',
                col_type: 'scroll_button',
            });
            for (var i in arts) {
                Apollo.d.push({
                    title: '‘‘’’<b><middle><font color="#67E0FA">' + parseDomForHtml(arts[i], 'Text') + '</font></middle></b>',
                    url: Apollo.url + pdfh(arts[i], 'a&&href') + yiji,
                    col_type: 'scroll_button',
                    extra: {
                        pageTitle: parseDomForHtml(arts[i], 'Text')
                    }
                })
            }
        }
        Apollo.CiliParse(html)

        //同演员作品
        var sameactor = pdfh(html, "body&&.col-12.mt-5&&Text");
        if (sameactor) {
            Apollo.d.push({
                title: '<span style="color: #FF00FF;">' + sameactor + '</span>',
                pic_url: "https://lanmeiguojiang.com/tubiao/ke/100.png",
                col_type: 'rich_text'
            });
        }
        Apollo.videoType(html)

        //同主题作品
        var sametopic = pdfh(html, "body&&.main-title&&Text");
        if (sametopic) {
            Apollo.d.push({
                title: '<span style="color: #FF00FF;">' + sametopic + '</span>',
                pic_url: "https://lanmeiguojiang.com/tubiao/ke/100.png",
                col_type: 'rich_text'
            });
        }
        var list = pdfa(html, ".list-unstyled&&li");
        list.forEach(item => {
            Apollo.d.push({
                title: pdfh(item, ".lazyload&&alt"),
                desc: pdfh(item, ".text-muted&&Text"),
                img: pdfh(item, ".lazyload&&data-src"),
                url: $(pdfh(item, 'a&&href') + '#noHistory#')
                    .rule(() => {
                    const Apollo = $.require('hiker://page/Apollo')
                    Apollo.videoParse(MY_URL)
                    setResult(Apollo.d)
                }),
                col_type: "movie_2",
                extra: {
                    pageTitle: pdfh(item, ".lazyload&&alt"),
                }
            })
        })
        Apollo.d.push({
            title: '““””' + "我是有底线的".fontcolor("grey")
                .small(),
            url: Apollo.empty,
            col_type: "text_center_1",
            extra: {
                lineVisible: false
            }
        })
        setResult(Apollo.d)
    },

    //磁力列表
    CiliParse: (html) => {
        const magnet = pdfa(html, 'body&&tbody&&.col');
        magnet.forEach(item => {
            Apollo.d.push({
                title: pdfh(item, "a&&Text"),
                desc: pdfh(item, ".badge-primary&&Text") + "\t\t" + pdfh(item, ".badge-danger&&Text") + "\t\t" + pdfh(item, ".badge-success&&Text") + "\t\t" + pdfh(item, ".badge-secondary&&Text"),
                img: "https://img.vinua.cn/images/Ocqpj.png",
                url: pdfh(item, "a&&href"),
                col_type: "avatar",
                extra: {
                    lineVisible: false
                }
            })
        })
    },

    //翻译
    translate: (text) => {
        var switchtrans = config.switchtrans
        if (switchtrans == true || switchtrans == "彩云小译") {
            try {
                var to = 'zh'
                var from = 'auto'

                    function init_data(source_lang, target_lang) {
                        return {
                            source: '',
                            detect: true,
                            os_type: 'ios',
                            device_id: 'F1F902F7-1780-4C88-848D-71F35D88A602',
                            trans_type: source_lang + '2' + target_lang,
                            media: 'text',
                            request_id: 424238335,
                            user_id: '',
                            dict: true,
                        }
                    }

                    function getRandomNumber() {
                        const rand = Math.floor(Math.random() * 99999) + 100000
                        return rand * 1000
                    }
                const post_data = init_data(from, to)
                post_data.source = text
                post_data.request_id = getRandomNumber()
                let res = fetch('https://interpreter.cyapi.cn/v1/translator', {
                    method: 'POST',
                    header: {
                        'Content-Type': 'application/json',
                        'x-authorization': 'token ssdj273ksdiwi923bsd9',
                        'user-agent': 'caiyunInterpreter/5 CFNetwork/1404.0.5 Darwin/22.3.0',
                    },
                    body: post_data,
                })
                let result = JSON.parse(res)
                    .target
                return result + "🇨🇳☁️彩云小译"
            } catch {
                log("翻译失败，使用原文");
                return text
            }
        } else if (switchtrans == "小牛翻译") {
            try {
                var url = "https://api.niutrans.com/NiuTransServer/translation";
                var api = config.api;
                if (api) {
                    if (text != "") {
                        var lang = "https://test.niutrans.com/NiuTransServer/language?src_text=" + text + "&source=text";
                        var from = JSON.parse(fetch(lang, {
                            timeout: 1000
                        }))
                            .language;
                        var result = post(url, {
                            body: {
                                src_text: text,
                                from: from,
                                to: "zh",
                                apikey: api,
                            },
                            timeout: 1223
                        });
                        var data = JSON.parse(result)
                        if (data.tgt_text) {
                            return data.tgt_text + "🇨🇳🐮小牛翻译"
                        } else {
                            log("翻译失败，使用原文");
                            return text
                        }
                    } else {
                        log("翻译失败，原文为空");
                        return text
                    }
                } else {
                    toast("预处理请填写翻译api")
                    return text
                }
            } catch {
                log("翻译失败，使用原文");
                return text
            }
        } else {
            return text
        }
    },

    //外链播放
    CodeParse: (识别码) => {
        Apollo.d.push({
            col_type: 'blank_block',
        })
        var codelazy = fetch('hiker://files/rules/Apollo/𝐂𝐨𝐝𝐞𝐋𝐚𝐳𝐲.js')
            .replace(/d\.push/g, "Apollo.d.push") || "";

        function downcode() {
            var js = fetch("https://mirror.ghproxy.com/https://raw.githubusercontent.com/ApolloRioo/R/master/𝐂𝐨𝐝𝐞𝐋𝐚𝐳𝐲");
            writeFile('hiker://files/rules/Apollo/𝐂𝐨𝐝𝐞𝐋𝐚𝐳𝐲.js', js);
            toast("远程数据已更新到本地")
            codelazy = fetch('hiker://files/rules/Apollo/𝐂𝐨𝐝𝐞𝐋𝐚𝐳𝐲.js')
                .replace(/d\.push/g, "Apollo.d.push")
        }
        if (!codelazy) {
            downcode()
        }
        try {
            eval(codelazy)
        } catch {
            downcode()
            eval(codelazy)
            log("读取失败更新远程数据")
        }
        CodeLazy(识别码)
    }

}

$.exports = Apollo