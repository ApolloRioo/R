const Apollo = {
    version: "20250419",
    empty: 'hiker://empty',
    url: "https://www5.javmost.com",
    d: [],
    getRangeColors: function() {
        return '#' + ('00000' + (Math.random() * 0x1000000 << 0)
                .toString(16))
            .substr(-6);
    }, //随机颜色
    pageAdd: function(page) {
        if (getMyVar("page")) {
            putMyVar("page", (parseInt(page) + 1) + '');
        }
        return;
    }, //翻页
    pageMoveto: function(page, pages) {
        var longClick = [{
            title: "首页",
            js: $.toString(() => {
                putMyVar("page", "1");
                refreshPage();
                return "hiker://empty";
            }),
        }, {
            title: "上页",
            js: $.toString((page) => {
                if (page > 1) {
                    putMyVar("page", (parseInt(page) - 1));
                    refreshPage();
                    return "hiker://empty";
                }
            }, page),
        }, {
            title: "第" + page + "页",
            js: "",
        }, {
            title: "跳转",
            js: $.toString(() => {
                return $("").input(() => {
                    putMyVar("page", input);
                    refreshPage();
                });
            }),
        }];
        if (typeof(pages) != 'undefined') {
            var extra1 = {
                title: "尾页" + pages,
                js: $.toString((pages) => {
                    putMyVar("page", pages);
                    refreshPage();
                    return "hiker://empty";
                }, pages),
            };
            longClick.push(extra1)
        }
        return longClick
    }, //长按跳页
    data: {
        category: getMyVar('Apollo.category', '0'),
        subCate: getMyVar('Apollo.subCate', '0'),
    },
    baseParse: () => {
        putMyVar("MY_TYPE", "主页");
        var page = getMyVar("page", MY_PAGE + "")
        let categoryList = [{
            "title": "全部",
            "path": "/showlist2/all/1/category/",
            "type": "video",
            "sub": []
        }, {
            "title": "最多观看",
            "path": "",
            "type": "video",
            "sub": [{
                "title": "每小时",
                "path": "/showlist2/none/1/topview/"
            }, {
                "title": "每日",
                "path": "/showlist2/none/1/topdaily/"
            }, {
                "title": "每星期",
                "path": "/showlist2/none/1/topweek/"
            }, {
                "title": "每月",
                "path": "/showlist2/none/1/topmonth/"
            }, {
                "title": "上月",
                "path": "/showlist2/none/1/toplastmonth/"
            }]
        }, {
            "title": "最新",
            "path": "/showlist2/new/1|/release/",
            "type": "video",
            "sub": []
        }, {
            "title": "评价",
            "path": "/showlist2/all/1/rating/",
            "type": "video",
            "sub": []
        }, {
            "title": "明星",
            "path": "/showliststar/all/1/pornstar/",
            "type": "avatar",
            "sub": []
        }, {
            "title": "制作",
            "path": "/showlistcate/all/1/allcode/",
            "type": "avatar",
            "sub": []
        }, {
            "title": "导演",
            "path": "/showlistcate/all/1/alldirector/",
            "type": "avatar",
            "sub": []
        }, {
            "title": "厂商",
            "path": "/showlistcate/all/1/allmaker/",
            "type": "avatar",
            "sub": []
        }]
        const currentCate = categoryList[Apollo.data.category]
        let url
        var type = currentCate.type
        var path = currentCate.path
        if (currentCate.sub.length > 0) {
            url = getMyVar("url", Apollo.url + currentCate.sub[Apollo.data.subCate].path)
        } else {
            url = getMyVar("url", Apollo.url + currentCate.path)
        }
        if (!url.includes("search")) {
            url = url.replace(/\/\d+\//, (match) => {
                if (match.startsWith("/") || match.startsWith('&')) {
                    return "/" + page + "/"
                } else {
                    return ""
                }
            });
        } else {
            url = url.replace(/\/\d+\/search/, "/" + page + "/search")
        }
        Apollo.pageAdd(page)
        if (url.includes("search")) {
            type = "search"
        }

        if (MY_PAGE == 1) {
            categoryList.forEach((cate, index) => {
                Apollo.d.push({
                    title: parseInt(Apollo.data.category) === index ?
                        '‘‘’’' + cate.title.fontcolor("#FFFFFF") : cate.title,
                    url: $(Apollo.empty + "#noLoading#").lazyRule((index) => {
                        putMyVar("Apollo.category", index.toString())
                        putMyVar("Apollo.subCate", '0')
                        clearMyVar("url")
                        clearMyVar("page")
                        clearMyVar("sort")
                        clearMyVar("ysort")
                        refreshPage(true)
                        return "hiker://empty"
                    }, index),
                    extra: {
                        'backgroundColor': parseInt(Apollo.data.category) === index ? Apollo.getRangeColors() : ''
                    },
                    col_type: 'scroll_button',
                })
            })
            if (currentCate.sub.length > 0) {
                Apollo.d.push({
                    col_type: 'blank_block',
                })
                currentCate.sub.forEach((cate, index) => {
                    Apollo.d.push({
                        title: parseInt(Apollo.data.subCate) === index ?
                            '‘‘’’' + cate.title.fontcolor("#FFFFFF") : cate.title,
                        url: $(Apollo.empty + "#noLoading#").lazyRule((index) => {
                            putMyVar("Apollo.subCate", index.toString());
                            clearMyVar("url")
                            clearMyVar("page")
                            clearMyVar("sort")
                            clearMyVar("ysort")
                            refreshPage(true)
                            return "hiker://empty"
                        }, index),
                        extra: {
                            'backgroundColor': parseInt(Apollo.data.subCate) === index ? Apollo.getRangeColors() : ''
                        },
                        col_type: 'scroll_button',
                    })
                })
            }
        }
        var html = fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            },
        })
        log(url)

        //动态分类
        //Apollo.DynamicSort(html)

        //搜索
        if (MY_PAGE == 1) {
            Apollo.d.push({
                title: "🔍",
                url: $.toString((url, page) => {
                    if (input.trim() != "") {
                        putMyVar('keyword', input);
                        var searchUrl = url + "/showlist2/" + input + "/1/search/"
                        putMyVar("url", searchUrl);
                        refreshPage();
                        return "hiker://empty"
                    } else {
                        return "confirm://搜索内容为空.js:'hiker://empty'"
                    }
                }, Apollo.url, page),
                desc: '搜索...',
                col_type: "input",
                extra: {
                    defaultValue: getMyVar('keyword', '') || "",
                }
            });
        }

        switch (type) {
            case 'home':
                if (MY_PAGE == 1 && !/search/.test(url)) {
                    /*try {
                        Apollo.lunboType(html)
                    } catch {}
                    Apollo.homeType(html)*/
                    Apollo.videoType(html, page)
                }
                break
            case 'video':
                Apollo.videoType(html, page)
                break
            case 'avatar':
                Apollo.avatarType(html, page)
                break
            case 'search':
                if (MY_PAGE == 1) {
                    Apollo.d.push({
                        title: '““””' + "搜寻结果".fontcolor("#FF00FF"),
                        url: "hiker://empty",
                        col_type: "text_1",
                        extra: {
                            lineVisible: false
                        }
                    })
                    Apollo.d.push({
                        col_type: "blank_block"
                    })
                }
                Apollo.videoType(html, page)
                break
            default:
                Apollo.videoType(html, page)
        }
        setResult(Apollo.d)
    },

    //动态分类
    DynamicSort: (html) => {
        const 分类颜色 = Apollo.getRangeColors()
        const 大类定位 = "body&&.contents&&.dropdown-menu:has(a)"
        const 拼接分类 = ""
        const 小类定位 = "body&&a"
        const 分类标题 = "Text"
        const 分类链接 = "a&&href"
        Apollo.d.push({
            col_type: "blank_block"
        });
        try {
            if (typeof(拼接分类) != 'undefined' && 拼接分类 != '') {
                var categories = pdfa(html, 大类定位).concat(pdfa(html, 拼接分类))
            } else {
                var categories = pdfa(html, 大类定位)
            }
        } catch {
            var categories = pdfa(html, 大类定位)
        }
        let init_cate = []
        for (let i = 0; i < 20; i++) {
            init_cate.push("0")
        }
        if (getMyVar("MY_TYPE") == "主页") {
            var cate_temp_json = getMyVar("sort", JSON.stringify(init_cate))
        } else {
            var cate_temp_json = getMyVar("ysort", JSON.stringify(init_cate))
        }
        var cate_temp = JSON.parse(cate_temp_json)

        if (MY_PAGE == 1) {
            categories.forEach((category, index) => {
                let sub_categories = pdfa(category, 小类定位).reverse();
                sub_categories.forEach((item, key) => {
                    let title = pdfh(item, 分类标题)
                    if (typeof(排除) != 'undefined' && 排除 != '') {
                        title = title.replace(new RegExp(排除, "g"), "")
                    };
                    Apollo.d.push({
                        title: key.toString() === cate_temp[index] ? '““””' + title.fontcolor(分类颜色) : title,
                        url: $(pdfh(item, 分类链接) + '#noLoading#').lazyRule((params) => {
                            params.cate_temp[params.index] = params.key.toString()
                            if (getMyVar("MY_TYPE") == "主页") {
                                putMyVar('sort', JSON.stringify(params.cate_temp));
                                putMyVar("url", input);
                            } else {
                                putMyVar('ysort', JSON.stringify(params.cate_temp));
                                putMyVar("yurl", input);
                            }
                            clearMyVar("page")
                            refreshPage(true)
                            return "hiker://empty"
                        }, {
                            cate_temp: cate_temp,
                            index: index,
                            key: key,
                            page: MY_PAGE,
                        }),
                        col_type: 'scroll_button',
                        extra: {
                            'backgroundColor': key.toString() === cate_temp[index] ? Apollo.getRangeColors() : ''
                        }
                    })
                })
                Apollo.d.push({
                    col_type: "blank_block"
                });
            })
        }
    },

    //搜索
    searchParse: (url) => {
        keyword = url.split("##")[1]
        url = Apollo.url + "/showlist2/" + keyword + "/" + MY_PAGE + "/search/"
        log(url)
        var html = fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            },
        })
        Apollo.videoType(html);
        setResult(Apollo.d)
    },
    //视频列表
    videoType: (html, page) => {
        /*try {
            var pages = pdfh(html, "body&&.pagination&&.last&&a&&href").match(/\/(\d+)\/$/)[1]
        } catch (e) {
            var pages = 1
        }*/
        try {
            var list = JSON.parse(html).result
        } catch {
            var list = []
        }
        list.forEach(item => {
            var img = item.cover.replace(/\d+x.*/, "preview.jpg");
            var url = item.url;
            var title = item.name.replace("-UNCENSORED-LEAK", "🔥") + " " + item.full_name
            Apollo.d.push({
                title: title,
                url: url + $('#noHistory#').rule((t) => {
                    const Apollo = $.require('hiker://page/Apollo?rule=' + t)
                    Apollo.videoParse(MY_URL)
                    setResult(Apollo.d)
                }, MY_RULE.title),
                pic_url: img,
                desc: "📆" + item.release + "⏰" + item.length + "分",
                col_type: 'movie_2',
                extra: {
                    pageTitle: title,
                    title: title,
                    img: img,
                    longClick: page ? Apollo.pageMoveto(page) : ""
                }
            })
        })
    },
    //二级
    videoParse: (url) => {
        var html = fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            },
        });
        log(url)
        const title = MY_PARAMS.title

        //setPageTitle(title)

        Apollo.d.push({
            title: '““””' + title.fontcolor("#D2691E").small(),
            url: "hiker://empty" + $('#noLoading#').lazyRule((title) => {
                title = title.replace(/FC2PPV\s\d+/, "").replace(/\w+-\d+\s/, "")
                //动态刷新
                var desc = findItem('transdesc').desc
                if (!desc) {
                    const Apollo = $.require('hiker://page/Apollo')
                    var translates = Apollo.translate(title)
                    updateItem("transdesc", {
                        desc: '““””' + translates.fontcolor("red").small(),
                    })
                } else {
                    updateItem("transdesc", {
                        desc: '',
                    })
                }
                return "hiker://empty"
                /*       
                          var translates = $.require("trans").translate(title)   
                          return "confirm://" + translates + ".js:'hiker://empty' "   */
            }, title),
            col_type: 'text_1',
            extra: {
                lineVisible: false,
                id: 'transdesc',
                longClick: [{
                    title: '网页',
                    js: $.toString(() => {
                        return "web://" + MY_URL
                    })
                }, {
                    title: '复制',
                    js: $.toString((title) => {
                        return "copy://" + title;
                    }, title)
                }, {
                    title: '百度翻译',
                    js: $.toString((title) => {
                        return "x5://https://fanyi.baidu.com/#en/zh/" + title
                    }, title)
                }, {
                    title: 'Deepl翻译',
                    js: $.toString((title) => {
                        return "x5://https://www.deepl.com/zh/translator-mobile#en/zh/" + title
                    }, title)
                }, {
                    title: '谷歌翻译',
                    js: $.toString((title) => {
                        return "x5://https://translate.google.com/?hl=zh-CN&sl=en&tl=zh-CN&text=" + title
                    }, title)
                }]
            }
        })
        Apollo.d.push({
            pic_url: MY_PARAMS.img, //pdfh(html, '.object-fit-contain&&poster') + '@Referer=' + Apollo.url,
            url: url, //"hiker://empty",
            col_type: 'pic_1_full',
        })

        let value = html.match(/YWRzMQo.\=.\'(.\S+)[$\']/)[1];
        let partList = html.match(/select_part\((.*?)\)/g);
        var list = [];
        for (let index = 0; index < partList.length; index++) {
            let expression = partList[index].replace("select_part(", '[').replace(")", ']');
            if (RegExp('parent').test(expression)) {
                let params = eval(expression);
                Apollo.d.push({
                    title: "🐬" + params[1] + "_" + params[0],
                    url: $("").lazyRule((value, params) => {
                        var result = post("https://www5.javmost.com/ri3123o235r/", {
                            body: {
                                "group": params[1],
                                "part": params[0],
                                "code": params[4],
                                "code2": params[5],
                                "code3": params[6],
                                "value": value,
                                "sound": "av",
                            },
                            headers: {
                                'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                                'referer': `https://www5.javmost.com/`
                            }
                        })
                        let videoUrl;
                        let url = JSON.parse(result).data[0];
                        log(url)
                        if (url.indexOf('streamtape') != -1 || url.indexOf('stapad') != -1) {
                            let resp = fetch(url);
                            let link = resp.match(/innerHTML.=.[\"\'].*?;/g) ? resp.match(/innerHTML.=.[\"\'].*?;/g) : [];
                            if (link.length == 0) {
                                return '解析失败';
                            }
                            let s = link[link.length - 1] ? s : '';
                            videoUrl = 'https:' + eval(s.replace(/innerHTML.=./, '')) + '&stream=1';
                            let res = fetch(videoUrl, {
                                onlyHeaders: true,
                                redirect: false
                            });
                            let location = JSON.parse(res).url;
                            // print(`location:${location}`);
                            return location;
                        } else if (url.indexOf('dood.') != -1) {
                            let makePlay = (token) => {
                                for (var a = "", t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", n = t.length, o = 0; 10 > o; o++)
                                    a += t.charAt(Math.floor(Math.random() * n));
                                return `${a}?token=${token}&expiry=${Date.now()}`;
                            }
                            // print(`url:${url}`);
                            let gethost = url.match(/http.*?\.\w+\//g) ? url.match(/http.*?\.\w+\//g).join() : '';
                            gethost = gethost.replace(/,.*/g, '');
                            gethost = gethost.substring(0, gethost.length - 1);
                            // print(`gethost:${gethost}`);
                            resp = fetchCodeByWebView(url, {
                                headers: {
                                    'referer': url
                                }
                            });
                            let link = resp.match(/\/pass_md5.*?',/g) ? resp.match(/\/pass_md5.*?',/g).join() : '';

                            link = link.substring(0, link.length - 2);
                            let res = fetch(`${gethost}${link}`, {
                                headers: {
                                    'referer': url
                                }
                            });
                            // print(res.body);
                            // print(`pass_md5_link:${link}`);
                            let paramsList = link.match(/\/[\w-]+/g);
                            // print(`paramsList:${paramsList}`);
                            let hash = paramsList[1] ? paramsList[1] : '';
                            let token = paramsList[2] ? paramsList[2] : '';
                            // print(`token:${token}`);
                            // print(`hash:${hash}`);
                            let startPlayUrl = `${gethost}/dood?op=watch&hash=${hash.substring(1)}&token=${token.substring(1)}&embed=1&ref2=${encodeURIComponent(url)}&adb=1&ftor=0`;
                            ress = fetch(startPlayUrl, {
                                headers: {
                                    'referer': url
                                }
                            });
                            // print(`startPlayUrl:${startPlayUrl}`);
                            link = ress + makePlay(token.substring(1));
                            // print(`link:${link}`);
                            let headers = {};
                            headers['Referer'] = gethost + '/';
                            headers['Accept-Encoding'] = 'Accept-Encoding: identity;q=1, *;q=0';
                            headers['Accept-Language'] = 'Accept-Language: zh-CN,zh;q=0.9,eo;q=0.8,en;q=0.7,ko;q=0.6';
                            headers['User-Agent'] = 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_4_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148';
                            return `${link};${JSON.stringify(headers)}`;
                        }
                        resp = fetch(url, {});
                        let parseUrl = resp.match(/https?:.*?(?:\.m3u8|\.mp4|api\/source)/)[0];
                        parseUrl = parseUrl.replace(/\\/g, "")
                        if (parseUrl.indexOf("/api/source") != -1) {
                            videoUrl = JSON.parse(post(url.replace("/v/", "/api/source/") + "r=&d=")).data[0].file;
                        } else {
                            let headers = "";
                            if (url.indexOf("streamsb") != -1) {
                                referera = 'https://streamsb.net/';
                            }
                            if (url.indexOf("javplayer.me") != -1) {
                                referera = 'https://javplayer.me/';
                            } else {
                                referera = url;
                            }
                            videoUrl = `${parseUrl};{referer@${referera}}`;
                        }
                        return videoUrl;
                    }, value, params),
                    extra: {
                        cls: "playlist " + index
                    },
                    col_type: "text_2"
                })
            }
        }

        Apollo.d.push({
            title: '推荐视频',
            url: Apollo.empty,
            col_type: 'text_center_1',
            extra: {
                lineVisible: false
            },
        })
        var list = pdfa(html, ".card-columns&&a")
        list.forEach((item) => {
            var title = pdfh(item, "img&&alt").replace(/UNCENSORED-LEAK/i, "🔥");
            var img = pdfh(item, "source&&data-srcset") ? pdfh(item, "source&&data-srcset") : pdfh(item, "img&&src");
            Apollo.d.push({
                title: title,
                img: img,
                url: pdfh(item, "a&&href") + $('#noHistory#').rule((t) => {
                    const Apollo = $.require('hiker://page/Apollo?rule=' + t)
                    Apollo.videoParse(MY_URL)
                    setResult(Apollo.d)
                }, MY_RULE.title),
                col_type: "movie_2",
                extra: {
                    pageTitle: title,
                    title: title,
                    img: img,
                    lineVisible: false
                }
            })
        })
        var list = pdfa(html, "body&&.card-group&&.card")
        list.forEach((item) => {
            var title = pdfh(item, "img&&alt").replace(/UNCENSORED-LEAK/i, "🔥");
            var img = pdfh(item, "source&&data-srcset") ? pdfh(item, "source&&data-srcset") : pdfh(item, "img&&src");
            Apollo.d.push({
                title: title,
                img: img,
                desc: pdfh(item, ".text-muted&&Text").replace("Release", ""),
                url: pdfh(item, "a&&href") + $('#noHistory#').rule((t) => {
                    const Apollo = $.require('hiker://page/Apollo?rule=' + t)
                    Apollo.videoParse(MY_URL)
                    setResult(Apollo.d)
                }, MY_RULE.title),
                col_type: "movie_2",
                extra: {
                    pageTitle: title,
                    title: title,
                    img: img,
                    lineVisible: false
                }
            })
        })
        Apollo.d.push({
            title: '““””' + "我是有底线的".fontcolor("grey").small(),
            url: Apollo.empty,
            col_type: "text_center_1",
            extra: {
                lineVisible: false
            }
        })
        setResult(Apollo.d)
    },

    //一级.简
    yijiParse: (url) => {
        putMyVar("MY_TYPE", "一级")
        var page = getMyVar("page", MY_PAGE + "")
        try {
            var pages = pdfh(html, "body&&.pagination&&.last&&a&&href").match(/\/(\d+)\/$/)[1]
        } catch (e) {
            var pages = 1
        }
        addListener("onClose", $.toString(() => {
            clearMyVar("yurl");
            clearMyVar("ysort");
            clearMyVar("page")
        }));
        url = getMyVar("yurl", url)
        if (!url.includes("search")) {
            url = url.replace(/\/\d+\//, (match) => {
                if (match.startsWith("/") || match.startsWith('&')) {
                    return "/" + page + "/"
                } else {
                    return ""
                }
            });
        } else {
            url = url.replace(/\/\d+\/search/, "/" + page + "/search")
        }
        log(url)
        Apollo.pageAdd(page)
        var html = fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            },
        })

        //Apollo.DynamicSort(html)
        Apollo.videoType(html, page)
    },

    avatarType: (html, page) => {
        try {
            html = JSON.parse(html).data
        } catch {}
        list = pdfa(html, "body&&.col-md-4").length > 0 ? pdfa(html, "body&&.col-md-4") : pdfa(html, "body&&.card")
        list.forEach(item => {
            var img = pdfh(item, 'img&&data-src') ? pdfh(item, 'img&&data-src') : pdfh(item, 'img&&src');
            var url = pdfh(item, 'a&&href');
            url = url.replace(/(.*com\/)(.*?)(\/.*)/, "$1showlist2$3fypage/$2/")
            Apollo.d.push({
                title: pdfh(item, 'h4&&Text'),
                img: img,
                url: url + $('').rule((t) => {
                    const Apollo = $.require('hiker://page/Apollo?rule=' + t)
                    Apollo.yijiParse(MY_URL)
                    setResult(Apollo.d)
                }, MY_RULE.title),
                col_type: url.includes("star") ? "card_pic_3" : "movie_2",
                extra: page ? {
                    longClick: Apollo.pageMoveto(page)
                } : ""
            })
        })
    },

    //翻译
    translate: (text) => {
        var switchtrans = true;
        if (switchtrans == true || switchtrans == "彩云小译") {
            try {
                var to = 'zh'
                var from = 'auto'

                function init_data(source_lang, target_lang) {
                    return {
                        source: '',
                        detect: true,
                        os_type: 'ios',
                        device_id: 'F1F902F7-1780-4C88-848D-71F35D88A602',
                        trans_type: source_lang + '2' + target_lang,
                        media: 'text',
                        request_id: 424238335,
                        user_id: '',
                        dict: true,
                    }
                }

                function getRandomNumber() {
                    const rand = Math.floor(Math.random() * 99999) + 100000
                    return rand * 1000
                }
                const post_data = init_data(from, to)
                post_data.source = text
                post_data.request_id = getRandomNumber()
                let res = fetch('https://interpreter.cyapi.cn/v1/translator', {
                    method: 'POST',
                    header: {
                        'Content-Type': 'application/json',
                        'x-authorization': 'token ssdj273ksdiwi923bsd9',
                        'user-agent': 'caiyunInterpreter/5 CFNetwork/1404.0.5 Darwin/22.3.0',
                    },
                    body: post_data,
                })
                let result = JSON.parse(res)
                    .target
                return result + "【☁️】"
            } catch {
                log("翻译失败，使用原文");
                return text
            }
        } else if (switchtrans == "小牛翻译") {
            try {
                var url = "https://api.niutrans.com/NiuTransServer/translation";
                var api = "ae337b61113bd81db91120dc4ef9b055";
                if (api) {
                    if (text != "") {
                        var lang = "https://test.niutrans.com/NiuTransServer/language?src_text=" + text + "&source=text";
                        var from = JSON.parse(fetch(lang, {
                                timeout: 1000
                            }))
                            .language;
                        var result = post(url, {
                            body: {
                                src_text: text,
                                from: from,
                                to: "zh",
                                apikey: api,
                            },
                            timeout: 1223
                        });
                        var data = JSON.parse(result)
                        if (data.tgt_text) {
                            return data.tgt_text + "【🐮】"
                        } else {
                            log("翻译失败，使用原文");
                            return text
                        }
                    } else {
                        log("翻译失败，原文为空");
                        return text
                    }
                } else {
                    toast("预处理请填写翻译api")
                    return text
                }
            } catch {
                log("翻译失败，使用原文");
                return text
            }
        } else {
            return text
        }
    },
}
$.exports = Apollo