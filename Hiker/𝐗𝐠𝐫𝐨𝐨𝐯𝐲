const Apollo = {
    version: "20241026",
    empty: 'hiker://empty',
    url: 'https://cn.xgroovy.com',
    d: [],
    getRangeColors: function() {
        return '#' + ('00000' + (Math.random() * 0x1000000 << 0)
                .toString(16))
            .substr(-6);
    }, //随机颜色
    pageAdd: function(page) {
        if (getMyVar("page")) {
            putMyVar("page", (parseInt(page) + 1) + '');
        }
        return;
    }, //翻页
    pageMoveto: function(page, pages) {
        var longClick = [{
            title: "首页",
            js: $.toString(() => {
                putMyVar("page", "1");
                refreshPage();
                return "hiker://empty";
            }),
        }, {
            title: "上页",
            js: $.toString((page) => {
                if (page > 1) {
                    putMyVar("page", (parseInt(page) - 1));
                    refreshPage();
                    return "hiker://empty";
                }
            }, page),
        }, {
            title: "第" + page + "页",
            js: "",
        }, {
            title: "跳转",
            js: $.toString(() => {
                return $("").input(() => {
                    putMyVar("page", input);
                    refreshPage();
                });
            }),
        }];
        if (typeof(pages) != 'undefined') {
            var extra1 = {
                title: "尾页" + pages,
                js: $.toString((pages) => {
                    putMyVar("page", pages);
                    refreshPage();
                    return "hiker://empty";
                }, pages),
            };
            longClick.push(extra1)
        }
        return longClick
    }, //长按跳页
    data: {
        category: getMyVar('Apollo.category', '0'),
        subCate: getMyVar('Apollo.subCate', '0'),
    },
    baseParse: () => {
        putMyVar("MY_TYPE", "主页");
        var page = getMyVar("page", MY_PAGE + "")
        let categoryList = [{
            "title": "首页",
            "path": "/",
            "type": "video",
            "sub": []
        }, {
            "title": "最新",
            "path": "/new/",
            "type": "video",
            "sub": []
        }, {
            "title": "最佳",
            "path": "/best/",
            "type": "video",
            "sub": []
        }, {
            "title": "分类",
            "path": "",
            "type": "video",
            "sub": [{
                "title": "中国人",
                "path": "/categories/chinese/"
            }, {
                "title": "口交",
                "path": "/categories/blowjob/"
            }, {
                "title": "业余",
                "path": "/categories/amateur/"
            }, {
                "title": "大屁股",
                "path": "/categories/big-ass/"
            }, {
                "title": "青少年 (18+)",
                "path": "/categories/teens/"
            }, {
                "title": "巨乳",
                "path": "/categories/big-tits/"
            }, {
                "title": "射精",
                "path": "/categories/cumshot/"
            }, {
                "title": "大屌",
                "path": "/categories/big-cock/"
            }, {
                "title": "贫乳",
                "path": "/categories/small-tits/"
            }, {
                "title": "爆菊",
                "path": "/categories/anal/"
            }, {
                "title": "跨种族",
                "path": "/categories/interracial/"
            }, {
                "title": "POV (第一视角)",
                "path": "/categories/pov/"
            }, {
                "title": "亚洲人",
                "path": "/categories/asian/"
            }, {
                "title": "辣妈",
                "path": "/categories/milf/"
            }, {
                "title": "人妖",
                "path": "/shemale/"
            }, {
                "title": "继家庭幻想",
                "path": "/categories/family/"
            }, {
                "title": "BBC (大黑屌)",
                "path": "/categories/bbc/"
            }, {
                "title": "拉丁裔美女",
                "path": "/categories/latina/"
            }, {
                "title": "性玩具",
                "path": "/categories/toys/"
            }, {
                "title": "体内射精",
                "path": "/categories/creampie/"
            }, {
                "title": "黑人",
                "path": "/categories/ebony/"
            }, {
                "title": "BBW (大号美女)",
                "path": "/categories/bbw/"
            }, {
                "title": "硬核性交",
                "path": "/categories/rough/"
            }, {
                "title": "手交",
                "path": "/categories/handjob/"
            }, {
                "title": "公共场合",
                "path": "/categories/public/"
            }, {
                "title": "性高潮",
                "path": "/categories/orgasm/"
            }, {
                "title": "娇小",
                "path": "/categories/petite/"
            }, {
                "title": "女性自慰",
                "path": "/categories/solo/"
            }, {
                "title": "出轨",
                "path": "/categories/cheating/"
            }, {
                "title": "双插入",
                "path": "/categories/double-penetration/"
            }, {
                "title": "浪漫",
                "path": "/categories/erotic/"
            }, {
                "title": "3P 三人行",
                "path": "/categories/threesome/"
            }, {
                "title": "制服",
                "path": "/categories/uniform/"
            }, {
                "title": "丝袜",
                "path": "/categories/stockings/"
            }, {
                "title": "美女",
                "path": "/categories/beautiful-girl/"
            }, {
                "title": "女性主导",
                "path": "/categories/femdom/"
            }, {
                "title": "多毛",
                "path": "/categories/hairy/"
            }, {
                "title": "妈妈",
                "path": "/categories/mom/"
            }, {
                "title": "俄罗斯人",
                "path": "/categories/russian/"
            }, {
                "title": "潮吹",
                "path": "/categories/squirt/"
            }, {
                "title": "按摩",
                "path": "/categories/massage/"
            }, {
                "title": "户外",
                "path": "/categories/outdoor/"
            }, {
                "title": "巴西人",
                "path": "/categories/brazilian/"
            }, {
                "title": "卡通",
                "path": "/categories/cartoon/"
            }, {
                "title": "绿帽侠",
                "path": "/categories/cuckold/"
            }, {
                "title": "轮交",
                "path": "/categories/gangbang/"
            }, {
                "title": "日本人",
                "path": "/categories/japanese/"
            }, {
                "title": "女同",
                "path": "/categories/lesbians/"
            }, {
                "title": "现实",
                "path": "/categories/reality/"
            }, {
                "title": "BDSM",
                "path": "/categories/bdsm/"
            }, {
                "title": "集体颜射",
                "path": "/categories/bukkake/"
            }, {
                "title": "试镜",
                "path": "/categories/casting/"
            }, {
                "title": "合集",
                "path": "/categories/compilation/"
            }, {
                "title": "集体性交",
                "path": "/categories/groupsex/"
            }, {
                "title": "摄像头",
                "path": "/categories/webcam/"
            }, {
                "title": "英国人",
                "path": "/categories/british/"
            }, {
                "title": "第一次",
                "path": "/categories/first-time/"
            }, {
                "title": "色情日漫",
                "path": "/categories/hentai/"
            }, {
                "title": "印度人",
                "path": "/categories/indian/"
            }, {
                "title": "双性恋者",
                "path": "/categories/bisexual/"
            }, {
                "title": "意大利人",
                "path": "/categories/italian/"
            }, {
                "title": "办公室",
                "path": "/categories/office/"
            }, {
                "title": "老年轻 (18/19)",
                "path": "/categories/old-young/"
            }, {
                "title": "阿拉伯人",
                "path": "/categories/arab/"
            }, {
                "title": "名人",
                "path": "/categories/celebrity/"
            }, {
                "title": "校园 (18+)",
                "path": "/categories/school/"
            }, {
                "title": "扮装",
                "path": "/categories/cosplay/"
            }, {
                "title": "拳交",
                "path": "/categories/fisting/"
            }, {
                "title": "法国人",
                "path": "/categories/french/"
            }, {
                "title": "德国人",
                "path": "/categories/german/"
            }, {
                "title": "熟女",
                "path": "/categories/mature/"
            }, {
                "title": "古典派",
                "path": "/categories/vintage/"
            }, {
                "title": "年轻人 (18/19)",
                "path": "/categories/young/"
            }]
        }, {
            "title": "模特",
            "path": "/pornstars/",
            "type": "articles",
            "sub": []
        }, {
            "title": "频道",
            "path": "/channels/",
            "type": "articles",
            "sub": []
        }, {
            "title": "标签",
            "path": "/tags/",
            "type": "tags",
            "sub": []
        }]
        const currentCate = categoryList[Apollo.data.category]
        let url
        var type = currentCate.type
        var path = currentCate.path
        if (currentCate.sub.length > 0) {
            url = getMyVar("url", Apollo.url + currentCate.sub[Apollo.data.subCate].path)
        } else {
            url = getMyVar("url", Apollo.url + currentCate.path)
        }
        url = url.replace(/\/\d+($|\?)|\?|$/, (match) => {
            if (page > 1) {
                if (match.startsWith("/")) {
                    return match.includes("?") ? (match.charAt(0) + page + "?") : (match.charAt(0) + page);
                } else if (match.startsWith("?")) {
                    return page + "?";
                } else {
                    return page;
                }
            } else {
                if (match.startsWith("/") || match.startsWith("?")) {
                    return match.charAt(0)
                } else {
                    return ""
                }
            }
        });
        Apollo.pageAdd(page)
        log(url)
        if (MY_PAGE == 1) {
            categoryList.forEach((cate, index) => {
                Apollo.d.push({
                    title: parseInt(Apollo.data.category) === index ?
                        '‘‘’’' + cate.title.fontcolor("#FFFFFF") : cate.title,
                    url: $(Apollo.empty + "#noLoading#").lazyRule((index) => {
                        putMyVar("Apollo.category", index.toString())
                        putMyVar("Apollo.subCate", '0')
                        clearMyVar("url")
                        clearMyVar("page")
                        refreshPage(true)
                        return "hiker://empty"
                    }, index),
                    extra: {
                        'backgroundColor': parseInt(Apollo.data.category) === index ? Apollo.getRangeColors() : ''
                    },
                    col_type: 'scroll_button',
                })
            })
            if (currentCate.sub.length > 0) {
                Apollo.d.push({
                    col_type: 'blank_block',
                })
                currentCate.sub.forEach((cate, index) => {
                    Apollo.d.push({
                        title: parseInt(Apollo.data.subCate) === index ?
                            '‘‘’’' + cate.title.fontcolor("#FFFFFF") : cate.title,
                        url: $(Apollo.empty + "#noLoading#").lazyRule((index) => {
                            putMyVar("Apollo.subCate", index.toString());
                            clearMyVar("url")
                            clearMyVar("page")
                            refreshPage(true)
                            return "hiker://empty"
                        }, index),
                        extra: {
                            'backgroundColor': parseInt(Apollo.data.subCate) === index ? Apollo.getRangeColors() : ''
                        },
                        col_type: 'scroll_button',
                    })
                })
            }
        }
        const html = fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)',
                "cookie": "xg_country=" + getMyVar("countrycode", "cn")
            }
        });
        //动态分类
        //Apollo.DynamicSort(html)
        Apollo.videoSort(html)
        //搜索
        if (url.includes("search")) {
            type = "search"
        }
        if (page == 1) {
            Apollo.d.push({
                title: "🔍",
                url: $.toString((url) => {
                    if (input.trim() != "") {
                        putMyVar('keyword', input);
                        var searchUrl = getHome(url) + "/search/" + input + "/"
                        putMyVar("url", searchUrl);
                        refreshPage();
                        return "hiker://empty"
                    } else {
                        let keys = listMyVarKeys();
                        for (let it of keys) {
                            clearMyVar(it);
                        }
                        refreshPage();
                        return "hiker://empty"
                        //return "confirm://搜索内容为空.js:'hiker://empty'"
                    }
                }, url),
                desc: '搜索...',
                col_type: "input",
                extra: {
                    defaultValue: getMyVar('keyword', '') || "",
                }
            });
        }
        if (url == Apollo.url + "/") {
            Apollo.countryType()
        }

        switch (type) {
            case 'video':
                Apollo.videoType(html, page)
                break
            case 'articles':
                Apollo.articlesType(html, page)
                break
            case 'tags':
                if (page == 1) {
                    Apollo.tagsType(html)
                }
                break
            case 'search':
                if (MY_PAGE == 1) {
                    Apollo.d.push({
                        title: '““””' + "搜寻结果".fontcolor("#FF00FF"),
                        url: "hiker://empty",
                        col_type: "text_1",
                        extra: {
                            lineVisible: false
                        }
                    })
                }
                Apollo.videoType(html, page)
                break
            default:
                Apollo.videoType(html, page)
        }
        setResult(Apollo.d)
    },

    //一级sort
    videoSort: (html) => {
        if (MY_PAGE == 1) {
            Apollo.d.push({
                col_type: "blank_block",
            });
            try {
                var sort = pdfa(html, ".sort||.default-list&&a")
                sort.forEach((item, index) => {
                    var title = pdfh(item, 'Text');
                    var urll = Apollo.url + pdfh(item, 'a&&href');
                    urll = urll.replace(/https?.*(https?.*)/, "$1");
                    Apollo.d.push({
                        title: title,
                        url: urll + $('#noLoading#')
                            .lazyRule((index) => {
                                if (getMyVar("MY_TYPE") == "主页") {
                                    putMyVar('sort', index);
                                    putMyVar("url", input);
                                } else {
                                    putMyVar('ysort', index);
                                    putMyVar("yurl", input);
                                }
                                clearMyVar("page")
                                refreshPage();
                                return 'hiker://empty'
                            }, index),
                        col_type: 'scroll_button',
                        extra: {
                            'backgroundColor': (getMyVar("MY_TYPE") == "主页" ? getMyVar('sort', '0') == index : getMyVar('ysort', '0') == index) ? Apollo.getRangeColors() : ''
                        }
                    })
                })
            } catch {}
        }
    },
    //动态分类
    DynamicSort: (html) => {
        const 分类颜色 = Apollo.getRangeColors()
        const 大类定位 = ".mb-6:has(.relative)&&.relative"
        const 拼接分类 = ".mb-3&&.relative"
        const 小类定位 = "body&&.block"
        const 分类标题 = "Text"
        const 分类链接 = "a&&href"
        Apollo.d.push({
            col_type: "blank_block"
        });
        try {
            if (typeof(拼接分类) != 'undefined' && 拼接分类 != '') {
                var categories = pdfa(html, 大类定位).concat(pdfa(html, 拼接分类))
            } else {
                var categories = pdfa(html, 大类定位)
            }
        } catch {
            var categories = pdfa(html, 大类定位)
        }
        let init_cate = []
        for (let i = 0; i < 20; i++) {
            init_cate.push("0")
        }
        if (getMyVar("MY_TYPE") == "主页") {
            var cate_temp_json = getMyVar("sort", JSON.stringify(init_cate))
        } else {
            var cate_temp_json = getMyVar("ysort", JSON.stringify(init_cate))
        }
        var cate_temp = JSON.parse(cate_temp_json)

        if (MY_PAGE == 1) {
            categories.forEach((category, index) => {
                let sub_categories = pdfa(category, 小类定位);
                sub_categories.forEach((item, key) => {
                    let title = pdfh(item, 分类标题)
                    if (typeof(排除) != 'undefined' && 排除 != '') {
                        title = title.replace(new RegExp(排除, "g"), "")
                    };
                    Apollo.d.push({
                        title: key.toString() === cate_temp[index] ? '““””' + title.fontcolor(分类颜色) : title,
                        url: $(pdfh(item, 分类链接) + '#noLoading#').lazyRule((params) => {
                            params.cate_temp[params.index] = params.key.toString()
                            if (getMyVar("MY_TYPE") == "主页") {
                                putMyVar('sort', JSON.stringify(params.cate_temp));
                                putMyVar("url", input);
                            } else {
                                putMyVar('ysort', JSON.stringify(params.cate_temp));
                                putMyVar("yurl", input);
                            }
                            clearMyVar("page")
                            refreshPage(true)
                            return "hiker://empty"
                        }, {
                            cate_temp: cate_temp,
                            index: index,
                            key: key,
                            page: MY_PAGE,
                        }),
                        col_type: 'scroll_button',
                        extra: {
                            'backgroundColor': key.toString() === cate_temp[index] ? Apollo.getRangeColors() : ''
                        }
                    })
                })
                Apollo.d.push({
                    col_type: "blank_block"
                });
            })
        }
    },

    //搜索
    searchParse: (url) => {
        var searchUrl = Apollo.url + "/search/" + url.split("##")[1] + "/" + MY_PAGE
        const html = fetch(searchUrl, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            }
        })
        Apollo.videoType(html);
        setResult(Apollo.d)
    },
    //视频列表
    videoType: (html, page) => {
        try {
            var pages = pdfh(html, ".pagination&&.last&&Text").match(/\d+/)[0]
        } catch (e) {
            var pages = 1
        }
        const list = pdfa(html, ".list-videos&&.item")
        list.forEach(item => {
            title = pdfh(item, 'img&&alt');
            Apollo.d.push({
                title: title,
                url: $(pdfh(item, 'a&&href') + '#noHistory#').rule(() => {
                    const Apollo = $.require('hiker://page/Apollo')
                    Apollo.videoParse(MY_URL)
                }),
                pic_url: pdfh(item, 'img&&src').replace(/\d+x.*/, "preview.jpg"),
                desc: pdfh(item, '.item-quality&&Text') + "⏰" + pdfh(item, '.duration&&Text'),
                col_type: 'movie_2',
                extra: {
                    pageTitle: title,
                    longClick: page ? Apollo.pageMoveto(page, pages) : ""
                }
            })
        })
    },
    //二级
    videoParse: (url) => {
        const html = fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            }
        })
        const title = pdfh(html, '.page-title&&Text')
        log(url)
        //setPageTitle(title)

        Apollo.d.push({
            title: '““””' + title.fontcolor("#D2691E").small(),
            url: url,
            col_type: 'text_1',
            extra: {
                lineVisiable: false
            }
        })
        const play = pdfa(html, "#main_video&&source")
        Apollo.d.push({
            pic_url: pdfh(html, 'meta[property=og:image]&&content'),
            url: $(Apollo.empty + '#noHistory#').lazyRule((play) => {
                hghest_quality = play.map(v => pdfh(v, "source&&src"))
                name_quality = play.map(v => pdfh(v, "source&&title"))
                let playlist = {
                    urls: hghest_quality,
                    names: name_quality,
                    headers: new Array(hghest_quality.length).fill({
                        Referer: ""
                    })
                };
                return playlist;
            }, play),
            col_type: 'pic_1_full',
        })
        var content = pdfh(html, '.info&&.item&&Text');
        if (content.trim() != "") {
            Apollo.setDesc(content)
        }
        //标签
        try {
            var list = pdfa(html, ".default-list&&a");
            list.forEach(item => {
                var vurl = Apollo.url + pdfh(item, 'a&&href');
                vurl = vurl.replace(/https?.*(https?.*)/, "$1")
                var title = pdfh(item, "a&&Text");
                Apollo.d.push({
                    title: '““””' + title.fontcolor("#AAAAAA"),
                    url: "hiker://empty#" + vurl + $('##fypage')
                        .rule(() => {
                            const Apollo = $.require('hiker://page/Apollo')
                            Apollo.yijiParse(MY_URL.split("##")[0])
                            setResult(Apollo.d)
                        }),
                    col_type: "flex_button",
                    extra: {
                        pageTitle: title,
                        'backgroundColor': Apollo.getRangeColors()
                    }
                })
            })
        } catch {}
        //相关
        Apollo.d.push({
            title: "相关视频".fontcolor("#D2691E").bold(),
            col_type: "rich_text"
        })
        Apollo.videoType(html)
        Apollo.d.push({
            title: '““””' + "我是有底线的".fontcolor("grey")
                .small(),
            url: Apollo.empty,
            col_type: "text_center_1",
            extra: {
                lineVisible: false
            }
        })
        setResult(Apollo.d)
    },

    //一级.简
    yijiParse: (url) => {
        putMyVar("MY_TYPE", "一级")
        var page = getMyVar("page", MY_PAGE + "")
        try {
            var pages = pdfh(html, ".pagination&&.last&&Text").match(/\d+/)[0]
        } catch {
            var pages = 1
        }
        addListener("onClose", $.toString(() => {
            clearMyVar("yurl");
            clearMyVar("ysort");
            clearMyVar("page")
        }));
        url = getMyVar("yurl", url).replace("hiker://empty#", "")
        url = url.replace(/\/\d+($|\?)|\?|$/, (match) => {
            if (page > 1) {
                if (match.startsWith("/")) {
                    return match.includes("?") ? (match.charAt(0) + page + "?") : (match.charAt(0) + page);
                } else if (match.startsWith("?")) {
                    return page + "?";
                } else {
                    return page;
                }
            } else {
                if (match.startsWith("/") || match.startsWith("?")) {
                    return match.charAt(0)
                } else {
                    return ""
                }
            }
        });
        log(url)
        Apollo.pageAdd(page)
        const html = fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            }
        })
        if (MY_PAGE == 1) {
            try {
                var title = "““””" + pdfh(html, ".img&&img&&alt").big().fontcolor("#FF1493") + "\n" + pdfh(html, ".model-list&&li:matches(重量)&&Text").fontcolor("#ef7251");
                var img = pdfh(html, ".img&&img&&src");
                var desc = "““””" + pdfh(html, ".model-list&&li:matches(测量)&&Text").big().fontcolor("#4169E1") + "\n" + pdfh(html, ".model-list&&li:matches(高度)&&Text").fontcolor("#00CED1").big();
                Apollo.d.push({
                    title: title,
                    desc: desc,
                    img: img,
                    url: "hiker://empty",
                    col_type: "movie_1_vertical_pic"
                })
            } catch {}
        }
        Apollo.videoSort(html)
        Apollo.videoType(html, page)
    },

    articlesType: (html, page) => {
        try {
            var pages = pdfh(html, ".pagination&&.last&&Text").match(/\d+/)[0]
        } catch {
            var pages = 1
        }
        const list = pdfa(html, "body&&.item")
        list.forEach(item => {
            var vurl = Apollo.url + pdfh(item, 'a&&href');
            vurl = vurl.replace(/https?.*(https?.*)/, "$1")
            Apollo.d.push({
                title: pdfh(item, 'img&&alt'),
                desc: pdfh(item, ".videos&&Text"),
                url: "hiker://empty#" + vurl + $('##fypage').rule(() => {
                    const Apollo = $.require('hiker://page/Apollo')
                    Apollo.yijiParse(MY_URL.split("##")[0])
                    setResult(Apollo.d)
                }),
                pic_url: pdfh(item, 'img&&src'),
                col_type: 'movie_2',
                extra: {
                    longClick: page ? Apollo.pageMoveto(page, pages) : ""
                }
            })
        })
    },

    tagsType: (html) => {
        var list = pdfa(html, '.list-tags-simple&&li')
        list.forEach(item => {
            var vurl = Apollo.url + pdfh(item, 'a&&href');
            vurl = vurl.replace(/https?.*(https?.*)/, "$1")
            var title = pdfh(item, 'a&&Text');
            Apollo.d.push({
                title: title,
                url: "hiker://empty#" + vurl + $('##fypage')
                    .rule(() => {
                        const Apollo = $.require('hiker://page/Apollo')
                        Apollo.yijiParse(MY_URL.split("##")[0])
                        setResult(Apollo.d)
                    }),
                col_type: "text_2",
                extra: {
                    pageTitle: title
                }
            })
        })
    },

    setDesc: (desc) => {
        function substr(str, maxLength) {
            let len = 0;
            for (let i = 0; i < str.length; i++) {
                if (str.charCodeAt(i) > 255) {
                    len += 2;
                } else {
                    len++;
                }
                if (len > maxLength) {
                    return str.slice(0, i) + '...';
                }
            }
            return str;
        }

        function setDesc(arr, desc, num) {
            //log(desc)
            if (desc == undefined) {
                return;
            }
            desc = desc.constructor == Array ? desc.join('<br>') : desc;
            if (desc.replace(/(<br>|\s+|<\/?p>|&nbsp;)/g, '').length == 0) {
                return;
            }

            const mark = 'desc';
            num = typeof(num) == 'undefined' ? 100 : num
            desc = desc.startsWith('　　') ? desc : '　　' + desc;
            desc = desc.replace(/'/g, "&#39;");
            desc = desc.replace(/\r\n/g, "<br>");
            desc = desc.replace(/\r/g, "<br>");
            desc = desc.replace(/\n/g, "<br>");
            let sdesc = substr(desc, num);

            var colors = {
                show: "#008000",
                hide: "#8A2BE2"
            }

            var lazy = $(`#noLoading#`).lazyRule((dc, sdc, m, cs) => {
                var show = storage0.getItem(m, '0');
                var title = findItem('desc').title;
                var re = /(<\/big><br>.*?>).+/g;
                var exp = '展开:';
                var ret = '收起:';
                if (show == '1') {
                    updateItem('desc', {
                        title: title
                            .replace(ret, exp)
                            .replace(re, '$1' + sdc + '</small>')
                            .replace(/(<\/big><br>\<font color=").*?(">)/, '$1' + cs.hide + '$2')

                    })
                    storage0.setItem(m, '0');
                } else {
                    updateItem('desc', {
                        title: title
                            .replace(exp, ret)
                            .replace(re, '$1' + dc + '</small>')
                            .replace(/(<\/big><br>\<font color=").*?(">)/, '$1' + cs.show + '$2')
                    })
                    storage0.setItem(m, '1');
                }
                return `hiker://empty`
            }, desc, sdesc, mark, colors)
            var sc = storage0.getItem(mark, '0') == '0' ? '展开:' : '收起:';
            var dc = storage0.getItem(mark, '0') == '0' ? sdesc : desc;
            var cs = storage0.getItem(mark, '0') == '0' ? colors.hide : colors.show;
            arr.push({
                title: '' + '<b><font color="#D2691E">∷ 剧情简介	</font></b>' + "<middle><a style='text-decoration: none;' href='" + lazy + "'>" + sc + '</a></big><br><font color="' + cs + '">' + `${dc}` + '</small>',
                col_type: 'rich_text',
                extra: {
                    id: 'desc',
                    lineSpacing: 6,
                    textSize: 15,
                    lineVisible: true,
                }
            })
        }
        setDesc(Apollo.d, desc, 90);
    },

    countryType: () => {
        //var country = JSON.parse(fetch(Apollo.url + "/ajax.php?action=current_country&type=json")).title
        var countrydata = [{
            "title": "中国",
            "path": "cn"
        }, {
            "title": "全世界",
            "path": "o1"
        }, {
            "title": "中国台湾省",
            "path": "tw"
        }, {
            "title": "丹麦",
            "path": "dk"
        }, {
            "title": "乌克兰",
            "path": "ua"
        }, {
            "title": "乔治亚州",
            "path": "ge"
        }, {
            "title": "以色列",
            "path": "il"
        }, {
            "title": "伊拉克",
            "path": "iq"
        }, {
            "title": "俄罗斯联邦",
            "path": "ru"
        }, {
            "title": "保加利亚",
            "path": "bg"
        }, {
            "title": "加拿大",
            "path": "ca"
        }, {
            "title": "匈牙利",
            "path": "hu"
        }, {
            "title": "南非",
            "path": "za"
        }, {
            "title": "印度",
            "path": "in"
        }, {
            "title": "印度尼西亚",
            "path": "id"
        }, {
            "title": "厄瓜多尔",
            "path": "ec"
        }, {
            "title": "哥伦比亚",
            "path": "co"
        }, {
            "title": "埃及",
            "path": "eg"
        }, {
            "title": "塞尔维亚",
            "path": "rs"
        }, {
            "title": "墨西哥",
            "path": "mx"
        }, {
            "title": "大韩民国",
            "path": "kr"
        }, {
            "title": "奥地利",
            "path": "at"
        }, {
            "title": "巴西",
            "path": "br"
        }, {
            "title": "希腊",
            "path": "gr"
        }, {
            "title": "德国",
            "path": "de"
        }, {
            "title": "意大利",
            "path": "it"
        }, {
            "title": "挪威",
            "path": "no"
        }, {
            "title": "捷克共和国",
            "path": "cz"
        }, {
            "title": "摩洛哥",
            "path": "ma"
        }, {
            "title": "斯洛伐克",
            "path": "sk"
        }, {
            "title": "斯里兰卡",
            "path": "lk"
        }, {
            "title": "新加坡",
            "path": "sg"
        }, {
            "title": "新西兰",
            "path": "nz"
        }, {
            "title": "日本",
            "path": "jp"
        }, {
            "title": "智利",
            "path": "cl"
        }, {
            "title": "柬埔寨",
            "path": "kh"
        }, {
            "title": "比利时",
            "path": "be"
        }, {
            "title": "法国",
            "path": "fr"
        }, {
            "title": "波兰",
            "path": "pl"
        }, {
            "title": "泰国",
            "path": "th"
        }, {
            "title": "澳大利亚",
            "path": "au"
        }, {
            "title": "爱尔兰",
            "path": "ie"
        }, {
            "title": "瑞典",
            "path": "se"
        }, {
            "title": "瑞士",
            "path": "ch"
        }, {
            "title": "秘鲁",
            "path": "pe"
        }, {
            "title": "突尼斯",
            "path": "tn"
        }, {
            "title": "约旦",
            "path": "jo"
        }, {
            "title": "罗马尼亚",
            "path": "ro"
        }, {
            "title": "美国",
            "path": "us"
        }, {
            "title": "芬兰",
            "path": "fi"
        }, {
            "title": "英国",
            "path": "gb"
        }, {
            "title": "荷兰",
            "path": "nl"
        }, {
            "title": "菲律宾",
            "path": "ph"
        }, {
            "title": "葡萄牙",
            "path": "pt"
        }, {
            "title": "西班牙",
            "path": "es"
        }, {
            "title": "越南",
            "path": "vn"
        }, {
            "title": "阿根廷",
            "path": "ar"
        }, {
            "title": "马来西亚",
            "path": "my"
        }, {
            "title": "黎巴嫩",
            "path": "lb"
        }, {
            "title": "不丹",
            "path": "bt"
        }, {
            "title": "东帝汶",
            "path": "tl"
        }, {
            "title": "中非共和国",
            "path": "cf"
        }, {
            "title": "乌兹别克斯坦",
            "path": "uz"
        }, {
            "title": "乌干达",
            "path": "ug"
        }, {
            "title": "乌拉圭",
            "path": "uy"
        }, {
            "title": "乍得",
            "path": "td"
        }, {
            "title": "也门",
            "path": "ye"
        }, {
            "title": "亚美尼亚",
            "path": "am"
        }, {
            "title": "他们有",
            "path": "ml"
        }, {
            "title": "伊朗伊斯兰共和国",
            "path": "ir"
        }, {
            "title": "会议",
            "path": "re"
        }, {
            "title": "伯利兹",
            "path": "bz"
        }, {
            "title": "佛得角",
            "path": "cv"
        }, {
            "title": "克罗地亚",
            "path": "hr"
        }, {
            "title": "关岛",
            "path": "gu"
        }, {
            "title": "冈比亚",
            "path": "gm"
        }, {
            "title": "冰岛",
            "path": "is"
        }, {
            "title": "几内亚",
            "path": "gn"
        }, {
            "title": "几内亚比绍",
            "path": "gw"
        }, {
            "title": "列支敦士登",
            "path": "li"
        }, {
            "title": "刚果",
            "path": "cg"
        }, {
            "title": "刚果民主共和国",
            "path": "cd"
        }, {
            "title": "利比亚",
            "path": "ly"
        }, {
            "title": "利比里亚",
            "path": "lr"
        }, {
            "title": "到达的",
            "path": "to"
        }, {
            "title": "加勒比海荷兰",
            "path": "bq"
        }, {
            "title": "加纳",
            "path": "gh"
        }, {
            "title": "加蓬",
            "path": "ga"
        }, {
            "title": "北马里亚纳群岛",
            "path": "mp"
        }, {
            "title": "南乔治亚岛和南桑威奇群岛",
            "path": "gs"
        }, {
            "title": "南极洲",
            "path": "aq"
        }, {
            "title": "南苏丹",
            "path": "ss"
        }, {
            "title": "博茨瓦纳",
            "path": "bw"
        }, {
            "title": "卡塔尔",
            "path": "qa"
        }, {
            "title": "卢旺达",
            "path": "rw"
        }, {
            "title": "卢森堡",
            "path": "lu"
        }, {
            "title": "危地马拉",
            "path": "gt"
        }, {
            "title": "厄立特里亚",
            "path": "er"
        }, {
            "title": "古巴",
            "path": "cu"
        }, {
            "title": "吉尔吉斯斯坦",
            "path": "kg"
        }, {
            "title": "吉布提",
            "path": "dj"
        }, {
            "title": "哈萨克斯坦",
            "path": "kz"
        }, {
            "title": "哥斯达黎加",
            "path": "cr"
        }, {
            "title": "喀麦隆",
            "path": "cm"
        }, {
            "title": "图瓦卢",
            "path": "tv"
        }, {
            "title": "土库曼斯坦",
            "path": "tm"
        }, {
            "title": "圣卢西亚",
            "path": "lc"
        }, {
            "title": "圣基茨和尼维斯",
            "path": "kn"
        }, {
            "title": "圣多美和普林西比",
            "path": "st"
        }, {
            "title": "圣巴泰勒米",
            "path": "bl"
        }, {
            "title": "圣座（梵蒂冈城邦）",
            "path": "va"
        }, {
            "title": "圣文森特和格林纳丁斯",
            "path": "vc"
        }, {
            "title": "圣皮埃尔和密克隆",
            "path": "pm"
        }, {
            "title": "圣诞岛",
            "path": "cx"
        }, {
            "title": "圣赫勒拿",
            "path": "sh"
        }, {
            "title": "圣马丁（法国）",
            "path": "mf"
        }, {
            "title": "圣马丁（荷兰）",
            "path": "sx"
        }, {
            "title": "圣马力诺",
            "path": "sm"
        }, {
            "title": "圭亚那",
            "path": "gy"
        }, {
            "title": "坦桑尼亚联合共和国",
            "path": "tz"
        }, {
            "title": "埃塞俄比亚",
            "path": "et"
        }, {
            "title": "基里巴斯",
            "path": "ki"
        }, {
            "title": "塔吉克斯坦",
            "path": "tj"
        }, {
            "title": "塞内加尔",
            "path": "sn"
        }, {
            "title": "塞拉利昂",
            "path": "sl"
        }, {
            "title": "塞浦路斯",
            "path": "cy"
        }, {
            "title": "塞舌尔",
            "path": "sc"
        }, {
            "title": "多哥",
            "path": "tg"
        }, {
            "title": "多明尼加共和国",
            "path": "do"
        }, {
            "title": "多米尼克",
            "path": "dm"
        }, {
            "title": "奥兰群岛",
            "path": "ax"
        }, {
            "title": "委内瑞拉",
            "path": "ve"
        }, {
            "title": "孟加拉国",
            "path": "bd"
        }, {
            "title": "安哥拉",
            "path": "ao"
        }, {
            "title": "安圭拉",
            "path": "ai"
        }, {
            "title": "安提瓜和巴布达",
            "path": "ag"
        }, {
            "title": "安道尔",
            "path": "ad"
        }, {
            "title": "密克罗尼西亚联邦",
            "path": "fm"
        }, {
            "title": "尼加拉瓜",
            "path": "ni"
        }, {
            "title": "尼日利亚",
            "path": "ng"
        }, {
            "title": "尼日尔",
            "path": "ne"
        }, {
            "title": "尼泊尔",
            "path": "np"
        }, {
            "title": "巴勒斯坦领土，被占领",
            "path": "ps"
        }, {
            "title": "巴哈马",
            "path": "bs"
        }, {
            "title": "巴基斯坦",
            "path": "pk"
        }, {
            "title": "巴巴多斯",
            "path": "bb"
        }, {
            "title": "巴布亚新几内亚",
            "path": "pg"
        }, {
            "title": "巴拉圭",
            "path": "py"
        }, {
            "title": "巴拿马",
            "path": "pa"
        }, {
            "title": "巴林",
            "path": "bh"
        }, {
            "title": "布基纳法索",
            "path": "bf"
        }, {
            "title": "布隆迪",
            "path": "bi"
        }, {
            "title": "帕劳",
            "path": "pw"
        }, {
            "title": "库克群岛",
            "path": "ck"
        }, {
            "title": "库拉索",
            "path": "cw"
        }, {
            "title": "开曼群岛",
            "path": "ky"
        }, {
            "title": "我自己的",
            "path": "om"
        }, {
            "title": "所罗门群岛",
            "path": "sb"
        }, {
            "title": "托克劳",
            "path": "tk"
        }, {
            "title": "拉脱维亚",
            "path": "lv"
        }, {
            "title": "摩尔多瓦共和国",
            "path": "md"
        }, {
            "title": "摩纳哥",
            "path": "mc"
        }, {
            "title": "文莱",
            "path": "bn"
        }, {
            "title": "斐济",
            "path": "fj"
        }, {
            "title": "斯威士兰",
            "path": "sz"
        }, {
            "title": "斯洛文尼亚",
            "path": "si"
        }, {
            "title": "斯瓦尔巴和扬马延",
            "path": "sj"
        }, {
            "title": "新喀里多尼亚",
            "path": "nc"
        }, {
            "title": "朝鲜民主主义人民共和国",
            "path": "kp"
        }, {
            "title": "根西岛",
            "path": "gg"
        }, {
            "title": "格林纳达",
            "path": "gd"
        }, {
            "title": "格陵兰",
            "path": "gl"
        }, {
            "title": "毛里塔尼亚",
            "path": "mr"
        }, {
            "title": "毛里求斯",
            "path": "mu"
        }, {
            "title": "沙特阿拉伯",
            "path": "sa"
        }, {
            "title": "法属南部领地",
            "path": "tf"
        }, {
            "title": "法属圭亚那",
            "path": "gf"
        }, {
            "title": "法属波利尼西亚",
            "path": "pf"
        }, {
            "title": "法罗群岛",
            "path": "fo"
        }, {
            "title": "波多黎各",
            "path": "pr"
        }, {
            "title": "波斯尼亚和黑塞哥维那",
            "path": "ba"
        }, {
            "title": "津巴布韦",
            "path": "zw"
        }, {
            "title": "洪都拉斯",
            "path": "hn"
        }, {
            "title": "海地",
            "path": "ht"
        }, {
            "title": "澳门",
            "path": "mo"
        }, {
            "title": "火鸡",
            "path": "tr"
        }, {
            "title": "爱沙尼亚",
            "path": "ee"
        }, {
            "title": "牙买加",
            "path": "jm"
        }, {
            "title": "特克斯和凯科斯群岛",
            "path": "tc"
        }, {
            "title": "特立尼达和多巴哥",
            "path": "tt"
        }, {
            "title": "玻利维亚",
            "path": "bo"
        }, {
            "title": "球衣",
            "path": "je"
        }, {
            "title": "瑙鲁",
            "path": "nr"
        }, {
            "title": "瓜德罗普",
            "path": "gp"
        }, {
            "title": "瓦利斯和富图纳",
            "path": "wf"
        }, {
            "title": "瓦努阿图",
            "path": "vu"
        }, {
            "title": "白俄罗斯",
            "path": "by"
        }, {
            "title": "百慕大",
            "path": "bm"
        }, {
            "title": "皮特凯恩",
            "path": "pn"
        }, {
            "title": "直布罗陀",
            "path": "gi"
        }, {
            "title": "福克兰群岛（马尔维纳斯）",
            "path": "fk"
        }, {
            "title": "科威特",
            "path": "kw"
        }, {
            "title": "科摩罗",
            "path": "km"
        }, {
            "title": "科科斯（基林）群岛",
            "path": "cc"
        }, {
            "title": "立陶宛",
            "path": "lt"
        }, {
            "title": "索马里",
            "path": "so"
        }, {
            "title": "纳米比亚",
            "path": "na"
        }, {
            "title": "纽埃",
            "path": "nu"
        }, {
            "title": "缅甸",
            "path": "mm"
        }, {
            "title": "美国本土外小岛屿",
            "path": "um"
        }, {
            "title": "美国维尔京群岛",
            "path": "vi"
        }, {
            "title": "美属萨摩亚",
            "path": "as"
        }, {
            "title": "老挝人民民主共和国",
            "path": "la"
        }, {
            "title": "肯尼亚",
            "path": "ke"
        }, {
            "title": "苏丹",
            "path": "sd"
        }, {
            "title": "苏里南",
            "path": "sr"
        }, {
            "title": "英属印度洋领地",
            "path": "io"
        }, {
            "title": "英属维尔京群岛",
            "path": "vg"
        }, {
            "title": "莫桑比克",
            "path": "mz"
        }, {
            "title": "莱索托",
            "path": "ls"
        }, {
            "title": "萨尔瓦多",
            "path": "sv"
        }, {
            "title": "萨摩亚",
            "path": "ws"
        }, {
            "title": "蒙古",
            "path": "mn"
        }, {
            "title": "蒙特塞拉特",
            "path": "ms"
        }, {
            "title": "西撒哈拉",
            "path": "eh"
        }, {
            "title": "诺福克岛",
            "path": "nf"
        }, {
            "title": "象牙海岸",
            "path": "ci"
        }, {
            "title": "贝宁",
            "path": "bj"
        }, {
            "title": "赞比亚",
            "path": "zm"
        }, {
            "title": "赤道几内亚",
            "path": "gq"
        }, {
            "title": "赫德岛和麦克唐纳群岛",
            "path": "hm"
        }, {
            "title": "阿塞拜疆",
            "path": "az"
        }, {
            "title": "阿富汗",
            "path": "af"
        }, {
            "title": "阿尔及利亚",
            "path": "dz"
        }, {
            "title": "阿尔巴尼亚",
            "path": "al"
        }, {
            "title": "阿拉伯叙利亚共和国",
            "path": "sy"
        }, {
            "title": "阿拉伯联合酋长国",
            "path": "ae"
        }, {
            "title": "阿鲁巴岛",
            "path": "aw"
        }, {
            "title": "马其顿，前南斯拉夫共和国",
            "path": "mk"
        }, {
            "title": "马尔代夫",
            "path": "mv"
        }, {
            "title": "马恩岛",
            "path": "im"
        }, {
            "title": "马拉维",
            "path": "mw"
        }, {
            "title": "马提尼克岛",
            "path": "mq"
        }, {
            "title": "马约特岛",
            "path": "yt"
        }, {
            "title": "马绍尔群岛",
            "path": "mh"
        }, {
            "title": "马耳他",
            "path": "mt"
        }, {
            "title": "马达加斯加",
            "path": "mg"
        }, {
            "title": "黑山",
            "path": "me"
        }]
        var countryname = countrydata.map(i => i.title)
        Apollo.d.push({
            title: '““””' + getMyVar("country", "中国").fontcolor("#FF00FF") + "的热门色情视频",
            url: $(countryname, 3).select((countrydata) => {
                let index = countrydata.findIndex(r => r.title == input);
                var code = countrydata[index].path
                putMyVar("country", input)
                putMyVar("countrycode", code)
                refreshPage()
                return "hiker://empty"
            }, countrydata),
            col_type: "text_1",
            extra: {
                lineVisible: false
            }
        })
    }
}
$.exports = Apollo
