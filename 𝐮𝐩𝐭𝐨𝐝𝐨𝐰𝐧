const Apollo = {
    version: "20240821",
    empty: "hiker://empty",
    url: config.host,
    er: $('#noHistory#')
        .rule(() => {
            const Apollo = $.require('hiker://page/Apollo')
            Apollo.avatarParse(MY_URL)
            setResult(Apollo.d)
        }),
    d: [],
    baseParse: () => {

        url = getMyVar("url", "https://cn.uptodown.com/")
        if (MY_PAGE !== 1 && !url.includes("search")) {
            url = url + "/" + MY_PAGE
        }
        log(url)
        if (url.includes("search")) {
            if (MY_PAGE == 1) {
                var html = post("https://cn.uptodown.com/android/search", {
                    body: {
                        "q": url.split("=")[1],
                    },
                    headers: {
                        "user-agent": "Mozilla/5.0 (Windows NT 10.0)"
                    }
                })
            } else {
                var html = post("https://cn.uptodown.com/android/apps/search", {
                    body: {
                        "query": url.split("=")[1],
                        "page": MY_PAGE
                    },
                    headers: {
                        "user-agent": "Mozilla/5.0 (Windows NT 10.0)"
                    }
                });
            }
        } else {
            var html = fetch(url, {
                headers: {
                    "user-agent": "Mozilla/5.0 (Windows NT 10.0)"
                }
            })
        }
        if (MY_PAGE == 1) {
            Apollo.videoSort(url, html)
            Apollo.d.push({
                title: "🔍",
                url: $.toString(() => {
                    putMyVar('keyword', input);
                    if (input == "") {
                        var searchUrl = "https://cn.uptodown.com/android/latest-updates"
                        clearMyVar('sort');
                    } else {
                        var searchUrl = "https://cn.uptodown.com/android/search?q=" + input
                    }
                    putMyVar("url", searchUrl);
                    refreshPage();
                    return "hiker://empty"
                }),
                desc: '搜索...',
                col_type: "input",
                extra: {
                    defaultValue: getMyVar('keyword', '') || "",
                }
            });
            if (url.includes("search")) {
                Apollo.d.push({
                    title: '““””' + '搜索结果'.fontcolor("#FF00FF"),
                    url: 'hiker://empty',
                    col_type: 'text_center_1',
                    extra: {
                        lineVisible: false
                    }
                });
            }
        }
        if (url == "https://cn.uptodown.com/") {
            Apollo.seriesType(html)
        } else {
            Apollo.videoType(html)
        }
        setResult(Apollo.d)
    },

    videoSort: (url, html) => {
        /* Apollo.d.push({
            col_type: "blank_block",
        })*/
        const sort = [{
            'title': '首页',
            'url': 'https://cn.uptodown.com/'
        }, {
            'title': '最近更新',
            'url': 'https://cn.uptodown.com/android/latest-updates'
        }, {
            'title': '最新发布',
            'url': 'https://cn.uptodown.com/android/newreleases'
        }, {
            'title': '下载排行',
            'url': 'https://cn.uptodown.com/android/top'
        }]
        sort.forEach((item, index) => {
            Apollo.d.push({
                title: getMyVar('sort', '0') == index ? '‘‘’’<strong><font color="#ff1493">' + item.title + '</font></strong>' : item.title,
                url: item.url + $('#noLoading#')
                    .lazyRule((index) => {
                        putMyVar('sort', index);
                        putMyVar("url", input);
                        refreshPage();
                        return 'hiker://empty'
                    }, index),
                col_type: 'scroll_button'
            })
        })
    },

    videoType: (html) => {

        var list = pdfa(html, ".list&&.item");
        list.forEach(item => {
            var vurl = pdfh(item, 'a&&href');
            Apollo.d.push({
                title: pdfh(item, "a&&Text"),
                img: pdfh(item, "img&&src"),
                url: vurl + Apollo.er,
                col_type: "icon_4_card",
            })
        })
        try {
            var list = JSON.parse(html);
            list.forEach(item => {
                Apollo.d.push({
                    title: item.name,
                    img: item.iconURL,
                    url: item.appURL + Apollo.er,
                    col_type: "icon_4_card",
                })
            })
        } catch {}
    },

    //首页
    seriesType: (html) => {
        var conts = pdfa(html, 'body&&.item-row.item-row-section:not(:matches(Roguelike))');
        for (var i = 0; i < conts.length; i++) {
            var line = pdfh(conts[i], 'h2&&Text');
            var list = pdfa(conts[i], 'body&&.item');
            if (!/游戏|小说|Browsers/.test(line) && line != "") {
                Apollo.d.push({
                    title: '““””' + line.fontcolor("#FF00FF"),
                    url: 'hiker://empty',
                    col_type: 'text_center_1',
                    extra: {
                        lineVisible: false
                    }
                });
                for (var j = 0; j < list.length; j++) {
                    var jm = pdfh(list[j], 'a&&Text');
                    var url = pdfh(list[j], 'a&&href');
                    Apollo.d.push({
                        title: jm,
                        img: pdfh(list[j], 'img&&src'),
                        url: url + Apollo.er,
                        col_type: "icon_4_card",
                        extra: {},
                    });
                }
            }
        }
    },

    avatarParse: (url) => {
        log(url);
        var html = fetch(url, {
            headers: {
                "user-agent": "Mozilla/5.0 (Windows NT 10.0)"
            }
        })
        var code = pdfh(html, ".detail&&.info&&h1&&code");
        Apollo.d.push({
            img: pdfh(html, ".detail&&.icon&&img&&src"),
            desc: "0",
            url: "hiker://empty",
            col_type: "card_pic_2"
        })
        Apollo.d.push({
            title: '\n' + '““””' + pdfh(html, ".detail&&#detail-app-name&&Text").fontcolor("#00AAD5").big() + '\n\n' + pdfh(html, ".detail&&.version&&Text").fontcolor("#666666") + '\n\n' + pdfh(html, ".detail&&.autor&&Text").fontcolor("#666666"),
            img: "",
            desc: "0",
            url: "hiker://empty",
            col_type: "card_pic_2"
        })
        Apollo.d.push({
            title: pdfh(html, ".detail&&h2&&Text").fontcolor("#666666").big(),
            url: "hiker://empty",
            col_type: "rich_text"
        })
        Apollo.d.push({
            title: '““””' + pdfh(html, ".download&&a&&Text").replace("获取", "").fontcolor("#666666").big(),
            url: pdfh(html, ".download&&a&&href") + $('').lazyRule(() => {
                var html = fetch(input, {
                    headers: {
                        "user-agent": "Mozilla/5.0 (Windows NT 10.0)"
                    }
                })
                tips = pdfh(html, ".download&&Text")
                if (tips.includes("通过")) {
                    return "toast://狗日的需要下载它的商城app"
                } else {
                    dwnapp = pdfh(html, ".download&&button&&data-url")
                    return 'download://https://dw.uptodown.com/dwn/' + dwnapp
                }
            }),
            col_type: "flex_button",
            extra: {
                'backgroundColor': '#00AAD5'
            }
        })
        try {
            Apollo.d.push({
                col_type: "blank_block",
            })
            Apollo.d.push({
                title: '““””' + pdfh(html, ".download&&.button.version&&Text").fontcolor("#FF0000").big(),
                url: pdfh(html, ".download&&.button.version&&a&&href") + $('##fypage').rule((code) => {
                    var d = [];
                    url = MY_URL.split("##")[0];
                    if (MY_PAGE != 1) {
                        url = 'https://chrome.cn.uptodown.com/android/apps/' + code + '/versions/' + MY_PAGE
                    }
                    log(url)
                    var html = fetch(url, {
                        headers: {
                            "user-agent": "Mozilla/5.0 (Windows NT 10.0)"
                        }
                    })
                    if (MY_PAGE == 1) {
                        d.push({
                            title: pdfh(html, ".detail&&h2&&Text").fontcolor("#666666").big(),
                            url: "hiker://empty",
                            col_type: "rich_text"
                        })
                    }
                    var list = pdfa(html, 'body&&#versions-items-list>div')
                    list.forEach((item) => {
                        d.push({
                            title: '♈️' + pdfh(item, '.version&&Text'),
                            desc: '☦️' + pdfh(item, '.sdkVersion&&Text') + '\t📆' + pdfh(item, '.date&&Text'),
                            url: pdfh(item, 'div&&data-url') + $('').lazyRule(() => {
                                var html = fetch(input, {
                                    headers: {
                                        "user-agent": "Mozilla/5.0 (Windows NT 10.0)"
                                    }
                                })
                                tips = pdfh(html, ".download&&Text")
                                if (tips.includes("通过")) {
                                    return "toast://狗日的需要下载它的商城app"
                                } else {
                                    dwnapp = pdfh(html, ".download&&button&&data-url")
                                    return 'download://https://dw.uptodown.com/dwn/' + dwnapp
                                }
                            }),
                            col_type: 'avatar'
                        })
                    })
                    try {
                        var list = JSON.parse(html).data;
                        list.forEach(item => {
                            d.push({
                                title: '♈️' + item.version,
                                desc: '☦️' + item.sdkVersion + '\t📆' + item.lastUpdate,
                                url: item.versionURL + $('').lazyRule(() => {
                                    var html = fetch(input, {
                                        headers: {
                                            "user-agent": "Mozilla/5.0 (Windows NT 10.0)"
                                        }
                                    })
                                    tips = pdfh(html, ".download&&Text")
                                    if (tips.includes("通过")) {
                                        return "toast://狗日的需要下载它的商城app"
                                    } else {
                                        dwnapp = pdfh(html, ".download&&button&&data-url")
                                        return 'download://https://dw.uptodown.com/dwn/' + dwnapp
                                    }
                                }),
                                col_type: "avatar",
                            })
                        })
                    } catch {}
                    setResult(d)
                }, code),
                col_type: "flex_button",
                extra: {
                    'backgroundColor': '#666666',
                    pageTitle: '旧版本'
                }
            })
        } catch {}
        Apollo.d.push({
            title: pdfh(html, "body&&article&&Html").replace(/<div[\s\S]+?(<div class=\"text-description[\s\S]+)/, "$1").replace(/<div class=\"ad text[\s\S]+?<h2/g, "<h2"),
            url: "hiker://empty",
            col_type: "rich_text"
        })
    },

}

$.exports = Apollo