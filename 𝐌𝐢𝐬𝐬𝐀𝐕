const miss = {
    version: "20240930",
    empty: 'hiker://empty',
    url: 'https://missav.com/cn/',
    d: [],
    taskList: [],
    getRangeColors: function() {
        return '#' + ('00000' + (Math.random() * 0x1000000 << 0)
                .toString(16))
            .substr(-6);
    }, //随机颜色
    data: {
        category: getMyVar('MissAV.category', '0'),
        subCate: getMyVar('MissAV.subCate', '0'),
    },
    baseParse: () => {
        const page = parseInt(MY_URL.split('##')[1])
        let categoryList = [{
            title: '推荐',
            path: '',
            type: 'video',
            sub: [{
                title: '今日热门',
                path: 'today-hot',
            }, {
                title: '本週热门',
                path: 'weekly-hot',
            }, {
                title: '本月热门',
                path: 'monthly-hot',
            }, {
                title: '最近更新',
                path: 'new',
            }, {
                title: '新作上市',
                path: 'release',
            }]
        }, {
            title: '流出',
            path: 'uncensored-leak',
            type: 'video',
            sub: []
        }, {
            title: '中字',
            path: 'chinese-subtitle',
            type: 'video',
            sub: []
        }, {
            title: '素人',
            path: '',
            type: 'video',
            sub: [{
                    title: 'SIRO',
                    path: 'siro'
                },
                {
                    title: 'LUXU',
                    path: 'luxu'
                },
                {
                    title: 'GANA',
                    path: 'gana'
                },
                {
                    title: 'PRESTIGE PREMIUM',
                    path: 'maan'
                },
                {
                    title: 'S-CUTE',
                    path: 'scute'
                },
                {
                    title: 'ARA',
                    path: 'ara'
                },
            ]
        }, {
            title: '无码',
            path: '',
            type: 'video',
            sub: [{
                title: 'FC2',
                path: 'fc2'
            }, {
                title: 'HEYZO ',
                path: 'heyzo'
            }, {
                title: '东京热',
                path: 'tokyohot'
            }, {
                title: '一本道',
                path: '1pondo'
            }, {
                title: 'Caribbeancom',
                path: 'caribbeancom'
            }, {
                title: 'Caribbeancompr',
                path: 'caribbeancompr'
            }, {
                title: '10musume',
                path: '10musume'
            }, {
                title: 'pacopacomama',
                path: 'pacopacomama'
            }, {
                title: 'Gachinco',
                path: 'gachinco'
            }, {
                title: 'XXX-AV',
                path: 'xxxav'
            }, {
                title: '人妻斩',
                path: 'marriedslash'
            }, {
                title: '顽皮 4610',
                path: 'naughty4610'
            }, {
                title: '顽皮 0930',
                path: 'naughty0930'
            }, ]
        }, {
            title: '国产',
            path: '',
            type: 'video',
            sub: [{
                title: '麻豆传媒',
                path: 'madou'
            }, {
                title: 'TWAV',
                path: 'twav'
            }, {
                title: 'Furuke',
                path: 'furuke'
            }, ]
        }, {
            title: 'VR',
            path: 'genres/VR',
            type: 'video',
            sub: []
        }, {
            title: 'AV影评',
            path: 'articles',
            type: 'articles',
            sub: []
        }, {
            title: '女优一览',
            path: 'actresses',
            type: 'avatar',
            sub: []
        }, {
            title: '女优排行',
            path: 'actresses/ranking',
            type: 'avatar',
            sub: []
        }, {
            title: '类型',
            path: 'genres',
            type: 'tags',
            sub: []
        }, {
            title: '发行商',
            path: 'makers',
            type: 'tags',
            sub: []
        }, {
            title: '更多',
            path: '',
            type: 'video',
            sub: [{
                title: 'Njav',
                path: 'site/njav',
                type: 'video',
                sub: []
            }, {
                title: 'Supjav',
                path: 'site/supjav',
                type: 'video',
                sub: []
            }, ]
        }, ]
        const currentCate = categoryList[miss.data.category]
        let url
        const type = currentCate.type
        const path = currentCate.path
        if (currentCate.sub.length > 0) {
            url = miss.url + currentCate.sub[miss.data.subCate].path
        } else {
            url = miss.url + currentCate.path
        }
        url += '?page=' + page
        log(url)
        if (page === 1) {
            categoryList.forEach((cate, index) => {
                miss.d.push({
                    title: parseInt(miss.data.category) === index ?
                        '‘‘’’<strong><font color="#ff1493">' + cate.title + '</font></strong>' : cate.title,
                    url: $(miss.empty + "#noLoading#").lazyRule((index) => {
                        putMyVar("MissAV.category", index.toString())
                        putMyVar("MissAV.subCate", '0')
                        refreshPage(true)
                        return "hiker://empty"
                    }, index),
                    col_type: 'scroll_button',
                })
            })
            if (currentCate.sub.length > 0) {
                miss.d.push({
                    col_type: 'blank_block',
                })
                currentCate.sub.forEach((cate, index) => {
                    miss.d.push({
                        title: parseInt(miss.data.subCate) === index ?
                            '‘‘’’<strong><font color="#ff1493">' + cate.title +
                            '</font></strong>' : cate.title,
                        url: $(miss.empty + "#noLoading#").lazyRule((index) => {
                            putMyVar("MissAV.subCate", index.toString())
                            refreshPage(true)
                            return "hiker://empty"
                        }, index),
                        col_type: 'scroll_button',
                    })
                })
            }
        }
        const html = fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            }
        })
        switch (type) {
            case 'video':
                miss.videoType(html)
                break
            case 'articles':
                miss.articlesType(html)
                break
            case 'avatar':
                if ((path === 'actresses/ranking' && page === 1) || path !== 'actresses/ranking') {
                    miss.avatarType(html)
                }
                break
            case 'tags':
                miss.tagsType(html)
                break
            default:
                miss.videoType(html)
        }
        setResult(miss.d)
    },


    searchParse: () => {
        if (MY_URL.includes("page=1")) {
            miss.d.push({
                title: "——女优——",
                url: "hiker://empty"
            });
            miss.avatarType(getResCode());

            miss.d.push({
                title: "——影片——",
                url: "hiker://empty"
            });
            miss.videoType2(getResCode());
        } else {
            miss.videoType(getResCode());
        }
        setResult(miss.d)
    },

    videoParse: (url) => {
        const html = fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            }
        })
        const title = pdfh(html, 'h1&&Text')
        log(url)
        setPageTitle(title)

        miss.d.push({
            title: '““””' + title.fontcolor("#D2691E").small(),
            url: url,
            col_type: 'text_1',
            extra: {
                lineVisiable: false
            }
        })
        miss.d.push({
            desc: pdfh(html, '.text-secondary.break-all.line-clamp-2&&Text'),
            pic_url: pdfh(html, 'meta[property=og:image]&&content') + '@Referer=' + miss.url,
            url: $(miss.empty + '#noHistory#').lazyRule((html, url) => {
                eval(html.match(/eval.*?\n/)[0])
                // 获取画质列表，并去最高画质
                let group_quality = fetch(source, {
                    headers: {
                        "origin": "https://missav.com"
                    }
                })
                hghest_quality = group_quality.match(/^(.*)\.m3u8$/gm).map(v => source.replace("playlist.m3u8", v)).reverse()
                name_quality = group_quality.match(/RESOLUTION=.*$/gm).map(n => n.replace("RESOLUTION=", "")).reverse()
                let playlist = {
                    urls: hghest_quality,
                    names: name_quality,
                    headers: new Array(hghest_quality.length).fill({
                        Referer: url
                    })
                };
                return playlist;
            }, html, miss.url),
            col_type: 'pic_1_full',
        })
        var content = pdfh(html, '.text-secondary.break-all.line-clamp-2&&Text');
        if (content.trim() != "") {
            miss.d.push({
                title: content.small().fontcolor("#2E8B57"),
                url: 'hiker://empty',
                col_type: 'rich_text',
                extra: {
                    lineVisiable: false
                }
            })
        }

        const text_secondary_list = pdfa(html, 'body&&.text-secondary')
        let num, actressesList, tagsList, series, makers, directors, labelsList
        text_secondary_list.forEach(item => {
            let current_title = pdfh(item, 'span&&Text')
            let actressName = '女优'
            if (current_title === '番号:') {
                num = pdfh(item, '.font-medium&&Text').replace("-UNCENSORED-LEAK", "").replace("-CHINESE-SUBTITLE", "")
            } else if (current_title === actressName + ':') {
                actressesList = pdfa(item, '.text-secondary&&a')
            } else if (current_title === '类型:') {
                tagsList = pdfa(item, '.text-secondary&&a')
            } else if (current_title === '系列:') {
                series = pdfa(item, '.text-secondary&&a')[0]
            } else if (current_title === '发行商:') {
                makers = pdfa(item, '.text-secondary&&a')[0]
            } else if (current_title === '导演:') {
                directors = pdfa(item, '.text-secondary&&a')[0]
            } else if (current_title === '标籤:') {
                labelsList = pdfa(item, '.text-secondary&&a')
            }
        })
        var 日期 = pdfh(html, 'body&&.text-secondary:matches(日期)&&Text');
        if (日期.trim() != "") {
            miss.d.push({
                title: '‘‘’’' + 日期.fontcolor("#FF0000"),
                url: 'hiker://empty',
                col_type: 'text_1',
                extra: {
                    lineVisiable: false
                }
            })
        }
        if (num) {
            miss.d.push({
                title: "““””番号 : " + num.fontcolor("#1E90FF"),
                url: 'copy://' + num,
                col_type: 'text_1',
                extra: {
                    lineVisible: false
                },
            })
        }
        var 标题 = pdfh(html, 'body&&.text-secondary:matches(标题)&&Text');
        if (标题.trim() != "") {
            miss.d.push({
                title: 标题.fontcolor("#008B8B").small(),
                url: 'hiker://empty',
                col_type: 'rich_text',
                extra: {
                    lineVisiable: false
                }
            })
        }
        miss.d.push({
            col_type: 'line_blank'
        })
        if (actressesList) {
            /*miss.d.push({
                title: '演员',
                url: miss.empty,
                col_type: 'text_center_1',
                extra: {
                    lineVisible: false
                },
            })*/
            actressesList.forEach((actresses, index) => {
                let title = pdfh(actresses, 'a&&Text')
                let url = pdfh(actresses, 'a&&href')
                miss.taskList.push({
                    func: miss.updateAvatar,
                    param: {
                        url: url,
                        index: 'avatar_' + index
                    },
                    id: 'avatar_' + index,
                })
                miss.d.push({
                    title: "““””" + title.fontcolor("#C71585"),
                    desc: '演员',
                    pic_url: miss.empty,
                    url: $(url + '?page=fypage#noHistory#').rule((title) => {
                        const miss = $.require('hiker://page/Apollo')
                        setPageTitle(title)
                        miss.avatarParse(MY_URL)
                        setResult(miss.d)
                    }, title),
                    col_type: 'icon_4_card',
                    extra: {
                        id: 'avatar_' + index,
                    }
                })
            })
            miss.d.push({
                col_type: 'line_blank'
            })
        }
        if (tagsList) {
            miss.d.push({
                title: '类型 : ',
                url: miss.empty,
                col_type: 'flex_button',
                extra: {
                    lineVisible: false
                },
            })
            tagsList.forEach(tag => {
                let tag_title = pdfh(tag, 'a&&Text')
                miss.d.push({
                    title: tag_title,
                    url: $(pdfh(tag, 'a&&href') + '?page=fypage#noHistory#').rule((tag_title) => {
                        const miss = $.require('hiker://page/Apollo')
                        setPageTitle(tag_title)
                        miss.tagsParse(MY_URL)
                        setResult(miss.d)
                    }, tag_title),
                    col_type: 'flex_button',
                    extra: {
                        'backgroundColor': miss.getRangeColors()
                    }
                })
            })

            miss.d.push({
                col_type: 'line_blank'
            })
        }
        if (series) {
            miss.d.push({
                title: '系列 : ',
                url: miss.empty,
                col_type: 'scroll_button',
                extra: {
                    lineVisible: false
                },
            })
            let series_title = pdfh(series, 'a&&Text')
            miss.d.push({
                title: series_title,
                url: $(pdfh(series, 'a&&href') + '?page=fypage#noHistory#').rule((series_title) => {
                    const miss = $.require('hiker://page/Apollo')
                    setPageTitle(series_title)
                    miss.tagsParse(MY_URL)
                    setResult(miss.d)
                }, series_title),
                col_type: 'scroll_button',
                extra: {
                    'backgroundColor': miss.getRangeColors()
                }
            })
            miss.d.push({
                col_type: 'line_blank'
            })
        }
        if (makers) {
            miss.d.push({
                title: '发行商 : ',
                url: miss.empty,
                col_type: 'scroll_button',
                extra: {
                    lineVisible: false
                },
            })
            let makers_title = pdfh(makers, 'a&&Text')
            miss.d.push({
                title: makers_title,
                url: $(pdfh(makers, 'a&&href') + '?page=fypage#noHistory#').rule((makers_title) => {
                    const miss = $.require('hiker://page/Apollo')
                    setPageTitle(makers_title)
                    miss.tagsParse(MY_URL)
                    setResult(miss.d)
                }, makers_title),
                col_type: 'scroll_button',
                extra: {
                    'backgroundColor': miss.getRangeColors()
                }
            })
            /*miss.d.push({
                col_type: 'line_blank'
            })*/
        }
        if (directors) {
            miss.d.push({
                title: '导演 : ',
                url: miss.empty,
                col_type: 'scroll_button',
                extra: {
                    lineVisible: false
                },
            })
            let directors_title = pdfh(directors, 'a&&Text')
            miss.d.push({
                title: directors_title,
                url: $(pdfh(directors, 'a&&href') + '?page=fypage#noHistory#').rule((directors_title) => {
                    const miss = $.require('hiker://page/Apollo')
                    setPageTitle(directors_title)
                    miss.tagsParse(MY_URL)
                    setResult(miss.d)
                }, directors_title),
                col_type: 'scroll_button',
                extra: {
                    'backgroundColor': miss.getRangeColors()
                }
            })
            miss.d.push({
                col_type: 'line_blank'
            })
        }
        if (labelsList) {
            miss.d.push({
                title: '标签 : ',
                url: miss.empty,
                col_type: 'scroll_button',
                extra: {
                    lineVisible: false
                },
            })
            labelsList.forEach(label => {
                let label_title = pdfh(label, 'a&&Text')
                miss.d.push({
                    title: label_title,
                    url: $(pdfh(label, 'a&&href') + '?page=fypage#noHistory#').rule((
                        label_title) => {
                        const miss = $.require('hiker://page/Apollo')
                        setPageTitle(label_title)
                        miss.tagsParse(MY_URL)
                        setResult(miss.d)
                    }, label_title),
                    col_type: 'scroll_button',
                    extra: {
                        'backgroundColor': miss.getRangeColors()
                    }
                })
            })
            miss.d.push({
                col_type: 'line_blank'
            })
        }

        const CiliList = pdfa(html, '.min-w-full&&tr')
        if (CiliList.length > 0) {
            miss.d.push({
                title: '本小站磁力' + CiliList.length + "条",
                url: miss.empty,
                col_type: 'text_center_1',
                extra: {
                    lineVisible: false
                },
            })
        } else {
            miss.BTshowParse(num);
        }
        CiliList.forEach((item, index) => {
            miss.d.push({
                title: pdfh(item, 'a&&Text'),
                url: pdfh(item, 'a&&href'),
                desc: (index + 1).toString().padStart(2, "0") + "\t💽" + pdfh('<table>' + item + '</table>', 'td,1&&Text') + "📆" + pdfh('<table>' + item + '</table>', 'td,2&&Text'),
                pic_url: "https://img.vinua.cn/images/Ooz4R.jpeg",
                col_type: 'avatar'
            })
        })

        /*var path = url.match(/\/(?!.*\/)(.*$)/) ? url.match(/\/(?!.*\/)(.*$)/)[1] : num;
        var userId = pdfh(html, ".items-center.space-x-6&&a&&href").match(/\/(?!.*\/).*userId=(.*$)/)[1]
        // 获取当前的 10 位 Unix 时间戳
        let timestamp = Math.floor(Date.now() / 1000);
        var sign;
        var URL = `https://client-rapi-missav.recombee.com/missav-default/batch/?frontend_timestamp=${timestamp}&frontend_sign=${sign}`;

        var result = fetch(URL, {
            body: JSON.stringify({
                "requests": [{
                    "method": "POST",
                    "path": `/recomms/items/${path}/items/`,
                    "params": {
                        "targetUserId": userId,
                        "count": 16,
                        "scenario": "mobile-watch-next",
                        "returnProperties": true,
                        "includedProperties": [
                            "title_cn",
                            "duration",
                            "has_chinese_subtitle",
                            "is_uncensored_leak",
                            "dm"
                        ],
                        "cascadeCreate": true
                    }
                }],
                "distinctRecomms": true
            }),
            headers: {
                "Content-Type": "application/json",
            },
            method: 'POST'
        });
        log(result)
        const videoList = pdfa(html, '.grid.grid-cols-2.gap-5&&.relative')
        miss.d.push({
            title: '推荐视频',
            url: miss.empty,
            col_type: 'text_center_1',
            extra: {
                lineVisible: false
            },
        })
        videoList.forEach(item => {
            miss.d.push({
                title: pdfh(item, '.lozad&&alt'),
                url: $(pdfh(item, 'a&&href') + '#noHistory#').rule(() => {
                    const miss = $.require('hiker://page/Apollo')
                    miss.videoParse(MY_URL)
                    setResult(miss.d)
                    if (miss.taskList.length > 0) {
                        be(miss.taskList)
                    }
                }),
                pic_url: pdfh(item, '.lozad&&data-src') + '@Referer=' + miss.url,
                desc: pdfh(item, '.absolute&&Text'),
                col_type: 'movie_2'
            })
        })*/
        miss.d.push({
            title: '““””' + "我是有底线的".fontcolor("grey")
                .small(),
            url: miss.empty,
            col_type: "text_center_1",
            extra: {
                lineVisible: false
            }
        })
        setResult(miss.d)
    },

    BTshowParse: (识别码) => {
        try {
            var btsow = "https://btsow.com/search/" + 识别码
            var BTlist = pdfa(fetch(btsow), "body&&.data-list&&.row,1:");
            if (BTlist.length > 0) {
                miss.d.push({
                    title: 'BTshow磁力' + BTlist.length + "条",
                    url: btsow,
                    col_type: 'text_center_1',
                    extra: {
                        lineVisible: false
                    },
                })
            }
            BTlist.forEach(item => {
                var url = getMyVar("BTcili");
                miss.d.push({
                    title: '<b><small><font color="#4682B4"> ' + pdfh(item, 'a&&title') + '</font></small>',
                    desc: pdfh(item, '.size-date&&Text').replace(" / Convert Date", "📆"),
                    img: "https://img.vinua.cn/images/Ocqpj.png",
                    url: "https:" + pdfh(item, 'a&&href') + $('').lazyRule(() => {
                        var url = pdfh(request(input, {}), '#magnetOpen&&a&&href');
                        putMyVar("BTcili", url)
                        return url
                    }),
                    col_type: "avatar",
                })
            })
        } catch {}
    },
    avatarParse: (url) => {
        const html = fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            }
        })
        miss.videoType(html)
    },


    tagsParse: (url) => {
        const html = fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            }
        })
        miss.videoType(html)
    },


    videoType: (html) => {
        const list = pdfa(html, '.grid&&.relative')
        list.forEach(item => {
            miss.d.push({
                title: pdfh(item, '.lozad&&alt'),
                url: $(pdfh(item, 'a&&href') + '#noHistory#').rule(() => {
                    const miss = $.require('hiker://page/Apollo')
                    miss.videoParse(MY_URL)
                    setResult(miss.d)
                    if (miss.taskList.length > 0) {
                        be(miss.taskList)
                    }
                }),
                pic_url: pdfh(item, '.lozad&&data-src').replace("cover-t", "cover-n") + '@Referer=' + miss.url,
                desc: pdfh(item, 'a&&alt').toUpperCase().replace("-CHINESE-SUBTITLE", "🀄️").replace("-UNCENSORED-LEAK", "🈚️") + "⏰" + pdfh(item, '.absolute,-1&&Text'),
                col_type: 'movie_2'
            })
        })
    },


    videoType2: (html) => {
        const list = pdfa(html, 'body&&.thumbnail')
        list.forEach(item => {
            miss.d.push({
                title: pdfh(item, '.lozad&&alt'),
                url: $(pdfh(item, 'a&&href') + '#noHistory#').rule(() => {
                    const miss = $.require('hiker://page/Apollo')
                    miss.videoParse(MY_URL)
                    setResult(miss.d)
                    if (miss.taskList.length > 0) {
                        be(miss.taskList)
                    }
                }),
                pic_url: pdfh(item, '.lozad&&data-src').replace("cover-t", "cover-n") + '@Referer=' + miss.url,
                desc: pdfh(item, 'a&&alt').toUpperCase() + "⏰" + pdfh(item, '.absolute,-1&&Text'),
                col_type: 'movie_2'
            })
        })
    },

    articlesType: (html) => {
        const list = pdfa(html, '.grid&&.rounded-lg')
        list.forEach(item => {
            miss.d.push({
                title: pdfh(item, 'img&&alt'),
                url: $(pdfh(item, 'a&&href') + '#noHistory#').rule(() => {
                    const miss = $.require('hiker://page/Apollo')
                    const html = fetch(MY_URL, {
                        headers: {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
                        }
                    })
                    miss.d.push({
                        title: pdfh(html, 'article&&Html'),
                        col_type: 'rich_text'
                    })
                    setResult(miss.d)
                }),
                pic_url: pdfh(item, 'img&&data-src') + '@Referer=' + miss.url,
                col_type: 'movie_2'
            })
        })
    },


    avatarType: (html) => {
        const list = pdfa(html, '.mx-auto.grid&&li')
        list.forEach(item => {
            miss.d.push({
                title: pdfh(item, 'h4&&Text'),
                url: $(pdfh(item, 'a&&href') + '?page=fypage#noHistory#').rule(() => {
                    const miss = $.require('hiker://page/Apollo')
                    miss.avatarParse(MY_URL)
                    setResult(miss.d)
                }),
                desc: pdfh(item, '.text-nord10&&Text'),
                pic_url: pdfh(item, 'img&&src') + '@Referer=' + miss.url,
                col_type: 'icon_round_4'
            })
        })
    },


    tagsType: (html) => {
        const list = pdfa(html, '.gap-4&&div')
        list.forEach(item => {
            miss.d.push({
                title: pdfh(item, 'a&&Text'),
                url: $(pdfh(item, 'a&&href') + '?page=fypage#noHistory#').rule(() => {
                    const miss = $.require('hiker://page/Apollo')
                    miss.tagsParse(MY_URL)
                    setResult(miss.d)
                }),
                col_type: 'text_4'
            })
        })
    },


    updateAvatar: (param) => {
        const actressesHtml = fetch(param.url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'
            }
        })
        updateItem({
            pic_url: pdfh(actressesHtml, '.object-cover.object-top.w-full.h-full&&src'),
            //col_type: 'card_pic_3',
            extra: {
                id: param.index
            }
        })
    },
}
$.exports = miss