const Apollo = {
    version: 20241009,
    empty: "hiker://empty",
    url: "https://jav.land",
    d: [],
    data: {
        category: getMyVar('Apo.category', '0'),
        subCate: getMyVar('Apo.subCate', '0'),
    },
    baseParse: () => {
        const page = parseInt(MY_URL.split('##')[2])
        let categoryList = [{
            "title": "影片",
            "path": "/ja/v_mostwanted.php",
            "type": "video",
            "sub": [{
                "title": "新回復",
                "path": "/ja/v_newreplys.php",
            }, {
                "title": "新發行",
                "path": "/ja/v_newrelease.php",
            }, {
                "title": "新加入",
                "path": "/ja/v_newentries.php",
            }, {
                "title": "最想要",
                "path": "/ja/v_mostwanted.php",
            }, {
                "title": "高評分",
                "path": "/ja/v_bestrated.php",
            }]
        }, {
            "title": "收藏",
            "path": "/ja/user/video_wanted.php",
            "type": "video",
            "sub": [{
                "title": "🗯美乳🗯",
                "path": "/ja/user/video_wanted.php?sort=2",
            }, {
                "title": "🗯長身🗯",
                "path": "/ja/user/video_watched.php?sort=2",
            }, {
                "title": "🗯絕世🗯",
                "path": "/ja/user/video_own.php?sort=2",
            }]
        }, {
            "title": "喜愛",
            "path": "/ja/user/fav_users.php",
            "type": "actress",
            "sub": [{
                "title": "🗯演員",
                "path": "/ja/user/fav_stars.php"
            }, {
                "title": "🗯導演",
                "path": "/ja/user/fav_directors.php"
            }, {
                "title": "🗯製作商",
                "path": "/ja/user/fav_makers.php"
            }, {
                "title": "🗯發行商🗯",
                "path": "/ja/user/fav_labels.php"
            }]
        }, {
            "title": "分類",
            "path": "/ja/categories.php",
            "type": "series",
            "sub": []
        }, {
            "title": "演員",
            "path": "/ja/star_list.php?prefix=A",
            "type": "actress",
            "sub": [{
                "title": "A",
                "path": "/ja/star_list.php?prefix=A"
            }, {
                "title": "B",
                "path": "/ja/star_list.php?prefix=B"
            }, {
                "title": "C",
                "path": "/ja/star_list.php?prefix=C"
            }, {
                "title": "D",
                "path": "/ja/star_list.php?prefix=D"
            }, {
                "title": "E",
                "path": "/ja/star_list.php?prefix=E"
            }, {
                "title": "F",
                "path": "/ja/star_list.php?prefix=F"
            }, {
                "title": "G",
                "path": "/ja/star_list.php?prefix=G"
            }, {
                "title": "H",
                "path": "/ja/star_list.php?prefix=H"
            }, {
                "title": "I",
                "path": "/ja/star_list.php?prefix=I"
            }, {
                "title": "J",
                "path": "/ja/star_list.php?prefix=J"
            }, {
                "title": "K",
                "path": "/ja/star_list.php?prefix=K"
            }, {
                "title": "L",
                "path": "/ja/star_list.php?prefix=L"
            }, {
                "title": "M",
                "path": "/ja/star_list.php?prefix=M"
            }, {
                "title": "N",
                "path": "/ja/star_list.php?prefix=N"
            }, {
                "title": "O",
                "path": "/ja/star_list.php?prefix=O"
            }, {
                "title": "P",
                "path": "/ja/star_list.php?prefix=P"
            }, {
                "title": "Q",
                "path": "/ja/star_list.php?prefix=Q"
            }, {
                "title": "R",
                "path": "/ja/star_list.php?prefix=R"
            }, {
                "title": "S",
                "path": "/ja/star_list.php?prefix=S"
            }, {
                "title": "T",
                "path": "/ja/star_list.php?prefix=T"
            }, {
                "title": "U",
                "path": "/ja/star_list.php?prefix=U"
            }, {
                "title": "V",
                "path": "/ja/star_list.php?prefix=V"
            }, {
                "title": "W",
                "path": "/ja/star_list.php?prefix=W"
            }, {
                "title": "X",
                "path": "/ja/star_list.php?prefix=X"
            }, {
                "title": "Y",
                "path": "/ja/star_list.php?prefix=Y"
            }]
        }, {
            "title": "登录",
            "path": "/ja/signin.php",
            "type": "login",
            "sub": []
        }]
        const currentCate = categoryList[Apollo.data.category]
        let url
        let type = currentCate.type
        let path = currentCate.path
        if (currentCate.sub.length > 0) {
            url = Apollo.url + getMyVar("url", currentCate.sub[Apollo.data.subCate].path)
            path = currentCate.sub[Apollo.data.subCate].path
        } else {
            url = Apollo.url + getMyVar("url", currentCate.path)
        }
        url = url.replace(/https?.*(https?.*)/, "$1")
        if (page === 1) {
            categoryList.forEach((cate, index) => {
                if (index == 1) {
                    Apollo.d.push({
                        title: "🔎",
                        url: $("", "规范的识别码格式,例如：EBOD-104").input(() => {
                            var searchUrl = "https://jav.land/ja/id_search.php?keys=" + input
                            try {
                                var url = JSON.parse(fetch(searchUrl, {
                                    onlyHeaders: true
                                })).url;
                                if (url == searchUrl) {
                                    return "toast://识别码错误或没有搜索结果"
                                } else {
                                    return url + $('#noHistory#')
                                        .rule(() => {
                                        const Apollo = $.require('hiker://page/Apollo')
                                        Apollo.videoParse(MY_URL)
                                        setResult(Apollo.d)
                                    })
                                }
                            } catch {}
                        }),
                        col_type: "scroll_button",
                        extra: {
                            pageTitle: "🔎搜索结果"
                        }
                    })
                }
                Apollo.d.push({
                    title: parseInt(Apollo.data.category) === index ? '‘‘’’<strong><font color="#ff1493">' + cate.title + '</font></strong>' : cate.title,
                    url: $(Apollo.empty + "#noLoading#")
                        .lazyRule((index) => {
                        putMyVar("Apo.category", index.toString())
                        putMyVar("Apo.subCate", '0')
                        clearMyVar("url")
                        clearMyVar("yurl");
                        refreshPage(true)
                        return "hiker://empty"
                    }, index),
                    col_type: 'scroll_button',
                })
            })
            if (currentCate.sub.length > 0) {
                Apollo.d.push({
                    col_type: 'blank_block',
                })
                currentCate.sub.forEach((cate, index) => {
                    Apollo.d.push({
                        title: parseInt(Apollo.data.subCate) === index ? '‘‘’’<strong><font color="#ff1493">' + cate.title + '</font></strong>' : cate.title,
                        url: $(Apollo.empty + "#noLoading#")
                            .lazyRule((index) => {
                            putMyVar("Apo.subCate", index.toString())
                            clearMyVar("url")
                            clearMyVar("yurl");
                            refreshPage(true)
                            return "hiker://empty"
                        }, index),
                        col_type: 'scroll_button',
                    })
                })
            }
        }
        //翻页
        /*
        if (page !== 1) {
            url = url.includes("?") ? url + "&page=" + page : url + "?&page=" + page
        }
        const html = fetch(url, {
            headers: {
                "Cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
            }
        })
        log(url)*/
        let nextPage = getMyVar("nextPage", "");
        if (nextPage && MY_PAGE > 1) {
            url = nextPage;
        } else if (MY_PAGE > 1) {
            // url = "没有下一页哦😑"
            if (/user|categories/.test(url)) {
                url = "没有下一页哦😑"
            } else {
                var pagnum = url.match(/page=(\d+)/) ? url.match(/page=(\d+)/)[1] : "1"
                if (pagnum == MY_PAGE) {
                    url = url.replace(/page=\d+/, "page=" + MY_PAGE)
                } else {
                    let sum = parseInt(pagnum) + MY_PAGE - 1;
                    url = url.replace(/page=\d+/, `page=` + sum)
                }
            }
        }
        const html = fetch(url, {
            headers: {
                cookie: fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
            }
        })
        log(url)
        try {
            var next = url.replace(/(.*)\?.*/, "$1") + pdfh(html, ".pagination&&li:matches(»)&&a&&href")
            putMyVar("nextPage", next);
        } catch {
            clearMyVar("nextPage");
            // log("可能不存在下一页或者下一页定位有问题");
        }

        switch (type) {
            case 'video':
                Apollo.videoType(url, html)
                break
            case 'actress':
                Apollo.avatarType(html)
                break
            case 'series':
                Apollo.avatarType(html)
                break
            case 'login':
                Apollo.loginType(html)
                break
            default:
                Apollo.videoType(url, html)
        }
        setResult(Apollo.d)
    },

    //登录
    loginType: (html) => {
        if (html.includes("ログアウト")) {
            Apollo.d.push({
                title: '““””<big><font color=#118811>账号已登录,点击退出账号</font></big>',
                desc: '““””' + '切换分类刷新页面内容'.fontcolor('#FF0000').big(),
                url: 'hiker://empty' + $('').lazyRule(() => {
                    writeFile('hiker://files/rules/Apollo/Cookie/javland_cookie.txt', '');
                    const Apollo = $.require('hiker://page/Apollo')
                    fetch(Apollo.url + "/ja/logout.php", {
                        headers: {
                            cookie: fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                            "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
                        }
                    })
                    refreshPage();
                    return "toast://账号已登出";
                }),
                col_type: 'text_center_1',
                extra: {
                    lineVisible: false
                }
            });
        } else {
            Apollo.d.push({
                title: '““””' + '点击登录账号'.fontcolor('#FF00FF').big(),
                url: "https://jav.land/ja/signin.php" + $('').rule(() => {
                    var d = [];
                    d.push({
                        col_type: 'x5_webview_single',
                        url: MY_URL,
                        desc: 'list&&screen',
                        extra: {
                            lineVisible: false,
                            "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36", //PC_UA,             
                            showProgress: false,
                            js: $.toString((u) => {
                                function check() {
                                    //let nodes = document.querySelectorAll('#tags');
                                    // var ua = fba.getUa()
                                    //  fba.log('co::::::' + ua);
                                    var htmlContent = document.documentElement.innerHTML;

                                    if (/基本情報/.test(htmlContent)) {
                                        // if (co.includes('USERKEY') && co.includes('PHPSESSID')) {
                                        var co = fba.getCookie(u);
                                        fba.log('co::::::' + co);
                                        fba.parseLazyRule($$$().lazyRule((co) => {
                                            writeFile('hiker://files/rules/Apollo/Cookie/javland_cookie.txt', co + ";show=replys");
                                            toast('账号已登录');
                                            back(true);
                                        }, co));
                                    } else {
                                        setTimeout(check, 500);
                                    }
                                }
                                check();
                            }, MY_URL)
                        }
                    });
                    return setResult(d);
                }),
                col_type: 'text_center_1'
            });

        }
    },

    //一级视频列表
    videoType: (url, html) => {
        try {
            var currpagenum = pdfh(html, ".pagination&&li:matches(«)&&a&&href").match(/.*?(\d+)/)[1]
            currpagenum++;
            // log(currpagenum)
        } catch {
            var currpagenum = "1"
            // log(currpagenum)
        }
        var list = pdfa(html, ".videothumblist&&.dq");
        list.forEach(item => {
            Apollo.d.push({
                title: pdfh(item, "img&&alt"),
                desc: pdfh(item, ".bsid&&Text"),
                img: pdfh(item, "img&&src"),
                url: Apollo.url + $(pdfh(item, 'a,-1&&href') + '?mode=1#noHistory#')
                    .rule(() => {
                    const Apollo = $.require('hiker://page/Apollo')
                    Apollo.videoParse(MY_URL)
                    setResult(Apollo.d)
                }),
                col_type: "movie_2",
                extra: {
                    pageTitle: pdfh(item, "img&&alt"),
                    longClick: !url.includes("movie") ? [{
                        title: '【跳页】【当前第>' + currpagenum + '<页】',
                        js: $.toString((currpagenum, url) => {
                            return $('', '正确的页码')
                                .input((url) => {
                                if (input > 0 && input % 1 == 0) {
                                    var jumpu = url.replace(/(\?page=\d+|\&page=\d+|$)/, (match) => {
                                        if (match.startsWith('?page=') || match.startsWith('&page=')) {
                                            return match.charAt(0) + 'page=' + input;
                                        } else {
                                            return (url.includes('?') ? '&page=' : '?page=') + input;
                                        }
                                    });
                                    putMyVar("url", jumpu);
                                    putMyVar("yurl", jumpu);
                                    refreshPage(false);
                                    return 'toast://你已经穿越到了' + input + '页'
                                } else {
                                    return "toast://请输入正确的页码"
                                }
                            },
                            url)
                        },
                        currpagenum, url)
                    }] : ""
                }
            })
        })
    },

    //一级演员
    avatarType: (html) => {
        //随机颜色
        var getRangeColors = function() {
            return '#' + ('00000' + (Math.random() * 0x1000000 << 0)
                .toString(16))
                .substr(-6);
        }
        try {
            var list = pdfa(html, '.genre_list&&a')
            list = list.length > 0 ? list : pdfa(html, '.videothumblist&&.dq')
            list.forEach(item => {
                var url = pdfh(item, 'a&&href');
                Apollo.d.push({
                    title: '““””' + pdfh(item, 'a&&Text')
                        .fontcolor(getRangeColors()),
                    desc: "",
                    url: $(Apollo.url + url + '#fypage#noHistory#')
                        .rule(() => {
                        const Apollo = $.require('hiker://page/Apollo')
                        Apollo.avatarParse(MY_URL)
                        setResult(Apollo.d)
                    }),
                    col_type: 'flex_button',
                    extra: {
                        longClick: html.includes("好きな") ? [{
                            title: '❗️取消收藏',
                            js: $.toString((url) => {
                                const Apollo = $.require('hiker://page/Apollo')
                                var match = url.match(/.*\/(.*?)\/(.*?)\.html/)
                                var id = match[2]
                                var action = match[1]
                                var result = JSON.parse(post(Apollo.url + "/ajax/ajax_user.php", {
                                    headers: {
                                        "cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                                        "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
                                    },
                                    body: {
                                        id: id,
                                        action: "del_" + action,
                                    }
                                })).ERROR;
                                if (result == 1) {
                                    refreshPage();
                                    return "toast://取消收藏成功！"
                                } else if (result == 2) {
                                    return "toast://请先登录！"
                                } else {
                                    return "toast://取消收藏失败！"
                                }
                            }, url)
                        }] : ""
                    }
                })
            })
        } catch {}
        Apollo.d.push({
            col_type: "blank_block"
        })
    },

    //一级页面.简
    avatarParse: (url) => {
        addListener("onClose", $.toString(() => {
            clearMyVar("yurl");
            clearMyVar("nextPage1");
        }));
        url = url.replace(/(.*?)#.*/, "$1");
        url = getMyVar("yurl", url)
            .replace(/(.*?)#.*/, "$1");
        /*
        if (MY_PAGE !== 1) {
            url = url.includes("?") ? url + "&page=" + MY_PAGE : url + "?&page=" + MY_PAGE
        }
        const html = fetch(url, {
            headers: {
                "Cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
            }
        })
        log(url)*/
        let nextPage = getMyVar("nextPage1", "");
        if (nextPage && MY_PAGE > 1) {
            url = nextPage;
        } else if (MY_PAGE > 1) {
            url = "没有下一页哦😑"
        }
        if (url.includes("genre")) {
            var html = fetch(url, {
                headers: {
                    "cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                    "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
                }
            })
        } else {
            var html = fetch(url, {
                headers: {
                    "cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt').replace("replys", "everything") || '',
                    "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
                }
            })
        }
        log(url)
        try {
            var next = Apollo.url + pdfh(html, ".pagination&&li:matches(»)&&a&&href")
            putMyVar("nextPage1", next);
        } catch {
            clearMyVar("nextPage1");
            // log("可能不存在下一页或者下一页定位有问题");
        }
        Apollo.videoType(url, html)
    },

    //搜索
    searchParse: (url) => {
        url = Apollo.url + url.replace("hiker://empty##", "")
        log(url)
        var html = fetch(url, {
            headers: {
                "cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt').replace("replys", "everything") || '',
                "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
            },
        })
        if (!html.includes("品番検索結果")) {
            Apollo.d.push({
                title: MY_KEYWORD,
                desc: "小撸怡情，大撸伤身",
                url: $(url + '#noHistory#')
                    .rule(() => {
                    const Apollo = $.require('hiker://page/Apollo')
                    Apollo.videoParse(MY_URL)
                    setResult(Apollo.d)
                }),
                col_type: "movie_2",
            })
        }
        setResult(Apollo.d)
    },

    //二级
    videoParse: (url) => {
        addListener("onClose", () => {
            clearMyVar("piclist");
        });
        log(url)
        var yiji = $('#fypage#noHistory#')
            .rule(() => {
            const Apollo = $.require('hiker://page/Apollo')
            Apollo.avatarParse(MY_URL)
            setResult(Apollo.d)
        })
        const html = fetch(url, {
            headers: {
                "cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
            }
        })
        var title = pdfh(html, "body&&.k-right&&.col-xs-12:has(.glyphicon-film)&&Text")
            .replace("免费AV在线看", "");
        var desct = title;
        Apollo.d.push({
            title: '““””' + title.fontcolor("#E57A1A").small(),
            url: "hiker://empty" + $('#noLoading#')
                .lazyRule((desct) => {
                var desc = findItem('transdesc')
                    .desc
                if (!desc) {
                    const Apollo = $.require('hiker://page/Apollo')
                    var translates = Apollo.translate(desct)
                    updateItem("transdesc", {
                        desc: '““””' + translates.fontcolor("red"),
                    })
                } else {
                    updateItem("transdesc", {
                        desc: '',
                    })
                }
                return "hiker://empty"
            }, desct),
            col_type: 'text_1',
            extra: {
                lineVisible: false,
                id: 'transdesc',
                longClick: [{
                    title: '网页',
                    js: $.toString(() => {
                        return "web://" + MY_URL
                    })
                }, {
                    title: '复制',
                    js: $.toString((title) => {
                        return "copy://" + title;
                    }, title)
                }, {
                    title: '百度翻译',
                    js: $.toString((title) => {
                        return "x5://https://fanyi.baidu.com/#jp/zh/" + title
                    }, title)
                }, {
                    title: 'Deepl翻译',
                    js: $.toString((title) => {
                        return "x5://https://www.deepl.com/zh/translator-mobile#ja/zh/" + title
                    }, title)
                }, {
                    title: '谷歌翻译',
                    js: $.toString((title) => {
                        return "x5://https://translate.google.com/?hl=zh-CN&sl=ja&tl=zh-CN&text=" + title
                    }, title)
                }]
            }
        })
        const id = url.replace(/.*\/(.*?)\.html.*/, "$1");
        const img = pdfh(html, "body&&.k-right&&.col-sm-12&&img&&src");
        // const preview = pdfh(html, "#pills-preview&&source&&src")
        Apollo.d.push({
            img: img,
            url: "hiker://empty" + $('').lazyRule((id) => {
                const Apollo = $.require('hiker://page/Apollo')
                var result = JSON.parse(post(Apollo.url + "/ajax/ajax_get_play_sample.php", {
                    headers: {
                        "cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                        "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
                    },
                    body: {
                        vid: id,
                        action: "get",
                    }
                }));
                // log(result)
                if (result.ERROR == 1) {
                    var html = result.videourl
                    var list = pdfa(html, "#samplevideo&&source")
                    let res = list.map(n => pdfh(n, "source&&res")).reverse()
                    let src = list.map(n => pdfh(n, "source&&src")).reverse()
                    let playlist = {
                        names: res,
                        urls: src
                    }
                    return playlist
                } else {
                    return "toast://没有预览视频哦😑"
                }
            }, id),
            col_type: "pic_1_full",
        })

        Apollo.d.push({
            col_type: "big_blank_block"
        })
        const 识别码 = pdfh(html, "body&&.k-right&&.col-sm-12&&img&&alt")
        Apollo.CodeParse(识别码)

        try {
            var picnum = "点击展开图片";
            if (picnum != "") {
                var list = pdfa(html, "body&&.k-right&&.container-fluid:has(span[id=waterfall])&&a[href^=http]")
                Apollo.d.push({
                    title: '““””' + (picnum + list.length + "张")
                        .fontcolor("#FF00FF"),
                    url: Apollo.empty + $("")
                        .lazyRule((list) => {
                        try {
                            if (getMyVar("piclist", "收起") == "收起") {
                                addItemAfter('picnum', {
                                    title: '““””' + "【收起图片】".fontcolor("#FF00FF"),
                                    url: "hiker://empty" + $("")
                                        .lazyRule((list) => {
                                        for (var i = list.length - 1; i >= 0; i--) {
                                            deleteItem('previewpic' + i);
                                        }
                                        deleteItem('nopiclist');
                                        putMyVar("piclist", "收起");
                                        return "hiker://empty"
                                    }, list),
                                    col_type: "text_center_1",
                                    extra: {
                                        lineVisible: false,
                                        id: "nopiclist"
                                    }
                                })
                                for (var i = list.length - 1; i >= 0; i--) {
                                    addItemAfter('picnum', {
                                        url: 'hiker://empty',
                                        img: pdfh(list[i], "a&&href"),
                                        col_type: "pic_1_full",
                                        extra: {
                                            id: 'previewpic' + i
                                        }
                                    });
                                }
                                putMyVar("piclist", "展开");
                            } else {
                                for (var i = list.length - 1; i >= 0; i--) {
                                    deleteItem('previewpic' + i);
                                }
                                deleteItem('nopiclist');
                                putMyVar("piclist", "收起");
                            }
                            return "hiker://empty"
                        } catch {
                            return "hiker://empty"
                        }
                    }, list),
                    col_type: "text_center_1",
                    extra: {
                        lineVisible: false,
                        id: "picnum"
                    }
                })
            }
        } catch {}

        var subscribed = pdfh(html, "#video_favorite_edit&&#subscribed&&.hidden&&Text")
        var watched = pdfh(html, "#video_favorite_edit&&#watched&&.hidden&&Text")
        var owned = pdfh(html, "#video_favorite_edit&&#owned&&.hidden&&Text")
        Apollo.d.push({
            title: '““””番号:' + 识别码.fontcolor("#FFD000"),
            url: "copy://" + 识别码,
            col_type: "scroll_button",
        }, {
            title: subscribed == "これが欲しい" ? '““””' + "💜美乳".fontcolor("#FF00FF") : '““””' + "✙".fontcolor("#FFD000") + "美乳",
            url: subscribed == "これが欲しい" ? $('').lazyRule((id) => {
                const Apollo = $.require('hiker://page/Apollo')
                var result = JSON.parse(post(Apollo.url + "/ajax/ajax_v_favoriteremove.php", {
                    headers: {
                        "cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                        "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
                    },
                    body: {
                        id: id,
                        type: "1",
                    }
                })).ERROR;
                // log(result)
                if (result == 1) {
                    //refreshPage();
                    back()
                    return "toast://删除收藏成功！"
                } else if (result == 2) {
                    return "toast://请先登录！"
                } else {
                    return "toast://删除收藏失败！"
                }
            }, id) : $('').lazyRule((id) => {
                const Apollo = $.require('hiker://page/Apollo')
                var result = JSON.parse(post(Apollo.url + "/ajax/ajax_v_favoriteadd.php", {
                    headers: {
                        "cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                        "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
                    },
                    body: {
                        id: id,
                        type: "1",
                    }
                })).ERROR;
                //log(result)
                if (result == 1) {
                    refreshPage();
                    return "toast://添加收藏成功！"
                } else if (result == 2) {
                    return "toast://请先登录！"
                } else {
                    return "toast://添加收藏失败！"
                }
            }, id),
            col_type: "scroll_button",
        }, {
            title: watched == "見た" ? '““””' + "💜長身".fontcolor("#FF00FF") : '““””' + "✙".fontcolor("#FFD000") + "長身",
            url: watched == "見た" ? $('').lazyRule((id) => {
                const Apollo = $.require('hiker://page/Apollo')
                var result = JSON.parse(post(Apollo.url + "/ajax/ajax_v_favoriteremove.php", {
                    headers: {
                        "cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                        "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
                    },
                    body: {
                        id: id,
                        type: "2",
                    }
                })).ERROR;
                //log(result)
                if (result == 1) {
                    //refreshPage();
                    back()
                    return "toast://删除收藏成功！"
                } else if (result == 2) {
                    return "toast://请先登录！"
                } else {
                    return "toast://删除收藏失败！"
                }
            }, id) : $('').lazyRule((id) => {
                const Apollo = $.require('hiker://page/Apollo')
                var result = JSON.parse(post(Apollo.url + "/ajax/ajax_v_favoriteadd.php", {
                    headers: {
                        "cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                        "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
                    },
                    body: {
                        id: id,
                        type: "2",
                    }
                })).ERROR;
                //log(result)
                if (result == 1) {
                    refreshPage();
                    return "toast://添加收藏成功！"
                } else if (result == 2) {
                    return "toast://请先登录！"
                } else {
                    return "toast://添加收藏失败！"
                }
            }, id),
            col_type: "scroll_button",
        }, {
            title: owned == "持ってる" ? '““””' + "💜絕世".fontcolor("#FF00FF") : '““””' + "✙".fontcolor("#FFD000") + "絕世",
            url: owned == "持ってる" ? $('').lazyRule((id) => {
                const Apollo = $.require('hiker://page/Apollo')
                var result = JSON.parse(post(Apollo.url + "/ajax/ajax_v_favoriteremove.php", {
                    headers: {
                        "cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                        "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
                    },
                    body: {
                        id: id,
                        type: "3",
                    }
                })).ERROR;
                // log(result)
                if (result == 1) {
                    //refreshPage();
                    back()
                    return "toast://删除收藏成功！"
                } else if (result == 2) {
                    return "toast://请先登录！"
                } else {
                    return "toast://删除收藏失败！"
                }
            }, id) : $('').lazyRule((id) => {
                const Apollo = $.require('hiker://page/Apollo')
                var result = JSON.parse(post(Apollo.url + "/ajax/ajax_v_favoriteadd.php", {
                    headers: {
                        "cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                        "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
                    },
                    body: {
                        id: id,
                        type: "3",
                    }
                })).ERROR;
                // log(result)
                if (result == 1) {
                    refreshPage();
                    return "toast://添加收藏成功！"
                } else if (result == 2) {
                    return "toast://请先登录！"
                } else {
                    return "toast://添加收藏失败！"
                }
            }, id),
            col_type: "scroll_button",
        }, {
            col_type: 'blank_block',
        }, {
            title: pdfh(html, 'body&&.k-right&&.videotextlist&&tr:contains(日:)&&Text'),
            url: Apollo.empty,
            col_type: "scroll_button",
        }, {
            title: pdfh(html, 'body&&.k-right&&.videotextlist&&tr:contains(時間:)&&Text'),
            url: Apollo.empty,
            col_type: "scroll_button",
        }, {
            col_type: 'blank_block',
        })

        //演员
        var arts = parseDomForArray(html, 'body&&.k-right&&.videotextlist&&.cast');
        if (arts.length > 0) {
            Apollo.d.push({
                col_type: "blank_block"
            })
            Apollo.d.push({
                title: "演員 : ",
                url: 'hiker://empty',
                col_type: 'scroll_button',
            })
            for (var i in arts) {
                var title = parseDomForHtml(arts[i], 'Text');
                var star_id = parseDomForHtml(arts[i], '.glyphicon-heart&&id');
                Apollo.d.push({
                    title: '‘‘’’<b><middle><font color="#c13141">' + title + '</font></middle></b>',
                    url: Apollo.url + pdfh(arts[i], 'a&&href').replace("..", "/ja") + yiji,
                    col_type: 'scroll_button',
                    extra: {
                        pageTitle: title,
                        longClick: [{
                            title: '✜收藏演员',
                            js: $.toString((star_id) => {
                                const Apollo = $.require('hiker://page/Apollo')
                                var result = JSON.parse(post(Apollo.url + "/ajax/ajax_favoriteadd.php", {
                                    headers: {
                                        "cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                                        "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
                                    },
                                    body: {
                                        id: star_id,
                                        type: "8",
                                    }
                                })).ERROR;
                                if (result == 1) {
                                    return "toast://收藏演员成功！"
                                } else if (result == 2) {
                                    return "toast://请先登录！"
                                } else {
                                    return "toast://添加收藏失败！"
                                }
                            }, star_id)
                        }, {
                            title: '复制演员',
                            js: $.toString((title) => {
                                return "copy://" + title;
                            }, title)
                        }, {
                            title: '谷歌搜索',
                            js: $.toString((title) => {
                                return "https://www.google.com/search?q=" + title;
                            }, title)
                        }, {
                            title: '百度搜索',
                            js: $.toString((title) => {
                                return "https://www.baidu.com/s?wd=" + title;
                            }, title)
                        }, {
                            title: '磁力搜演员',
                            js: $.toString((title) => {
                                return "hiker://page/sou?rule=磁力君.简&p=fypage&searchTerms=" + title
                            }, title)
                        }]
                    }
                })
            }
        }

        //类别
        var arts = parseDomForArray(html, 'body&&.k-right&&.videotextlist&&.genre');
        if (arts.length > 0) {
            Apollo.d.push({
                col_type: "blank_block"
            })
            Apollo.d.push({
                title: "類別 : ",
                url: 'hiker://empty',
                col_type: 'scroll_button',
            });
            for (var i in arts) {
                Apollo.d.push({
                    title: '‘‘’’<b><middle><font color="#1E8884">' + parseDomForHtml(arts[i], 'Text') + '</font></middle></b>',
                    url: Apollo.url + pdfh(arts[i], 'a&&href').replace("..", "/ja") + yiji,
                    col_type: 'scroll_button',
                    extra: {
                        pageTitle: parseDomForHtml(arts[i], 'Text')
                    }
                })
            }
        }
        Apollo.d.push({
            col_type: "blank_block"
        })
        //导演
        try {
            var director = pdfh(html, 'body&&.k-right&&.videotextlist&&.director&&a&&Text');
            var director_id = pdfh(html, 'body&&.k-right&&.videotextlist&&.director&&.glyphicon-heart&&id');
            if (director) {
                Apollo.d.push({
                    title: "导演 : ",
                    url: 'hiker://empty',
                    col_type: 'scroll_button',
                })
                Apollo.d.push({
                    title: '‘‘’’<b><middle><font color="#1E90FF">' + director + '</font></middle></b>',
                    url: Apollo.url + pdfh(html, 'body&&.k-right&&.videotextlist&&.director&&a&&href').replace("..", "/ja") + yiji,
                    col_type: 'scroll_button',
                    extra: {
                        pageTitle: director,
                        longClick: [{
                            title: '✜收藏导演',
                            js: $.toString((director_id) => {
                                const Apollo = $.require('hiker://page/Apollo')
                                var result = JSON.parse(post(Apollo.url + "/ajax/ajax_favoriteadd.php", {
                                    headers: {
                                        "cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                                        "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
                                    },
                                    body: {
                                        id: director_id,
                                        type: "5",
                                    }
                                })).ERROR;
                                if (result == 1) {
                                    return "toast://收藏导演成功！"
                                } else if (result == 2) {
                                    return "toast://请先登录！"
                                } else {
                                    return "toast://添加收藏失败！"
                                }
                            }, director_id)
                        }]
                    }
                });
            }
        } catch {}
        //片商
        try {
            var maker = pdfh(html, 'body&&.k-right&&.videotextlist&&.maker&&a&&Text');
            var maker_id = pdfh(html, 'body&&.k-right&&.videotextlist&&.maker&&.glyphicon-heart&&id');
            if (maker) {
                Apollo.d.push({
                    title: "片商 : ",
                    url: 'hiker://empty',
                    col_type: 'scroll_button',
                })
                Apollo.d.push({
                    title: '‘‘’’<b><middle><font color="#1E90FF">' + maker + '</font></middle></b>',
                    url: Apollo.url + pdfh(html, 'body&&.k-right&&.videotextlist&&.maker&&a&&href').replace("..", "/ja") + yiji,
                    col_type: 'scroll_button',
                    extra: {
                        pageTitle: maker,
                        longClick: [{
                            title: '✜收藏导演',
                            js: $.toString((maker_id) => {
                                const Apollo = $.require('hiker://page/Apollo')
                                var result = JSON.parse(post(Apollo.url + "/ajax/ajax_favoriteadd.php", {
                                    headers: {
                                        "cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                                        "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
                                    },
                                    body: {
                                        id: maker_id,
                                        type: "6",
                                    }
                                })).ERROR;
                                if (result == 1) {
                                    return "toast://收藏片商成功！"
                                } else if (result == 2) {
                                    return "toast://请先登录！"
                                } else {
                                    return "toast://添加收藏失败！"
                                }
                            }, maker_id)
                        }]
                    }
                })
            }
        } catch {}
        //发行商
        try {
            var label = pdfh(html, 'body&&.k-right&&.videotextlist&&.label1&&a&&Text');
            var label_id = pdfh(html, 'body&&.k-right&&.videotextlist&&.label1&&.glyphicon-heart&&id');
            if (label) {
                Apollo.d.push({
                    title: "发行商 : ",
                    url: 'hiker://empty',
                    col_type: 'scroll_button',
                })
                Apollo.d.push({
                    title: '‘‘’’<b><middle><font color="#1E90FF">' + label + '</font></middle></b>',
                    url: Apollo.url + pdfh(html, 'body&&.k-right&&.videotextlist&&.label1&&a&&href').replace("..", "/ja") + yiji,
                    col_type: 'scroll_button',
                    extra: {
                        pageTitle: label,
                        longClick: [{
                            title: '✜收藏发行',
                            js: $.toString((label_id) => {
                                const Apollo = $.require('hiker://page/Apollo')
                                var result = JSON.parse(post(Apollo.url + "/ajax/ajax_favoriteadd.php", {
                                    headers: {
                                        "cookie": fetchPC('hiker://files/rules/Apollo/Cookie/javland_cookie.txt') || '',
                                        "User-Agent": "Mozilla/5.0 (Linux; Android 12; SM-G9750 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.72 MQQBrowser/6.2 TBS/046279 Mobile Safari/537.36",
                                    },
                                    body: {
                                        id: label_id,
                                        type: "7",
                                    }
                                })).ERROR;
                                if (result == 1) {
                                    return "toast://收藏发行成功！"
                                } else if (result == 2) {
                                    return "toast://请先登录！"
                                } else {
                                    return "toast://添加收藏失败！"
                                }
                            }, label_id)
                        }]
                    }
                })
            }
        } catch {}
        Apollo.d.push({
            col_type: "blank_block"
        })
        //系列
        try {
            var makers = pdfh(html, 'body&&.k-right&&.videotextlist&&.series&&a&&Text');
            if (makers) {
                Apollo.d.push({
                    title: "系列 : ",
                    url: 'hiker://empty',
                    col_type: 'scroll_button',
                })
                Apollo.d.push({
                    title: '‘‘’’<b><middle><font color="#63A233">' + makers + '</font></middle></b>',
                    url: Apollo.url + pdfh(html, 'body&&.k-right&&.videotextlist&&.series&&a&&href').replace("..", "/ja") + yiji,
                    col_type: 'scroll_button',
                    extra: {
                        pageTitle: makers
                    }
                })
            }
        } catch {}

        Apollo.ReplysParse(html)
        Apollo.d.push({
            title: '““””' + "我是有底线的".fontcolor("grey")
                .small(),
            url: Apollo.empty,
            col_type: "text_center_1",
            extra: {
                lineVisible: false
            }
        })
        setResult(Apollo.d)
    },

    //回复列表
    ReplysParse: (html) => {
        const replys = pdfa(html, '.list-group&&li:has(.hidden:not(:matches(url)))');
        if (replys.length > 0) {
            Apollo.d.push({
                title: '““””' + "用户回复 ：".fontcolor("#FF00FF").sub(),
                url: "hiker://empty",
                col_type: "text_1",
                extra: {
                    lineVisible: false
                }
            })
            replys.forEach(item => {
                Apollo.d.push({
                    title: '““””' + pdfh(item, "p&&Text").fontcolor("#67E0FA").small(),
                    //img: "https://img.vinua.cn/images/Ocqpj.png",
                    url: "hiker://empty", //pdfh(item, "a&&href"),
                    col_type: "text_1",
                    extra: {
                        lineVisible: true
                    }
                })
            })
        }
    },

    //翻译
    translate: (text) => {
        var switchtrans = true;
        if (switchtrans == true || switchtrans == "彩云小译") {
            try {
                var to = 'zh'
                var from = 'auto'

                    function init_data(source_lang, target_lang) {
                        return {
                            source: '',
                            detect: true,
                            os_type: 'ios',
                            device_id: 'F1F902F7-1780-4C88-848D-71F35D88A602',
                            trans_type: source_lang + '2' + target_lang,
                            media: 'text',
                            request_id: 424238335,
                            user_id: '',
                            dict: true,
                        }
                    }

                    function getRandomNumber() {
                        const rand = Math.floor(Math.random() * 99999) + 100000
                        return rand * 1000
                    }
                const post_data = init_data(from, to)
                post_data.source = text
                post_data.request_id = getRandomNumber()
                let res = fetch('https://interpreter.cyapi.cn/v1/translator', {
                    method: 'POST',
                    header: {
                        'Content-Type': 'application/json',
                        'x-authorization': 'token ssdj273ksdiwi923bsd9',
                        'user-agent': 'caiyunInterpreter/5 CFNetwork/1404.0.5 Darwin/22.3.0',
                    },
                    body: post_data,
                })
                let result = JSON.parse(res)
                    .target
                return result + "【☁️】"
            } catch {
                log("翻译失败，使用原文");
                return text
            }
        } else if (switchtrans == "小牛翻译") {
            try {
                var url = "https://api.niutrans.com/NiuTransServer/translation";
                var api = config.api;
                if (api) {
                    if (text != "") {
                        var lang = "https://test.niutrans.com/NiuTransServer/language?src_text=" + text + "&source=text";
                        var from = JSON.parse(fetch(lang, {
                            timeout: 1000
                        }))
                            .language;
                        var result = post(url, {
                            body: {
                                src_text: text,
                                from: from,
                                to: "zh",
                                apikey: api,
                            },
                            timeout: 1223
                        });
                        var data = JSON.parse(result)
                        if (data.tgt_text) {
                            return data.tgt_text + "【🐮】"
                        } else {
                            log("翻译失败，使用原文");
                            return text
                        }
                    } else {
                        log("翻译失败，原文为空");
                        return text
                    }
                } else {
                    toast("预处理请填写翻译api")
                    return text
                }
            } catch {
                log("翻译失败，使用原文");
                return text
            }
        } else {
            return text
        }
    },

    //外链播放
    CodeParse: (识别码) => {
        Apollo.d.push({
            col_type: 'blank_block',
        })
        var codelazy = fetch('hiker://files/rules/Apollo/𝐂𝐨𝐝𝐞𝐋𝐚𝐳𝐲.js')
            .replace(/d\.push/g, "Apollo.d.push") || "";

        function downcode() {
            var js = fetch("https://mirror.ghproxy.com/https://raw.githubusercontent.com/ApolloRioo/R/master/𝐂𝐨𝐝𝐞𝐋𝐚𝐳𝐲");
            writeFile('hiker://files/rules/Apollo/𝐂𝐨𝐝𝐞𝐋𝐚𝐳𝐲.js', js);
            toast("远程数据已更新到本地")
            codelazy = fetch('hiker://files/rules/Apollo/𝐂𝐨𝐝𝐞𝐋𝐚𝐳𝐲.js')
                .replace(/d\.push/g, "Apollo.d.push")
        }
        if (!codelazy) {
            downcode()
        }
        try {
            eval(codelazy)
        } catch {
            downcode()
            eval(codelazy)
            log("读取失败更新远程数据")
        }
        CodeLazy(识别码)
    }

}

$.exports = Apollo